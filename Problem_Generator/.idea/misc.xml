<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="BackendCodeEditorMiscSettings">
    <option name="/Default/RiderDebugger/RiderRestoreDecompile/RestoreDecompileSetting/@EntryValue" value="false" type="bool" />
    <option name="/Default/Housekeeping/GlobalSettingsUpgraded/IsUpgraded/@EntryValue" value="true" type="bool" />
    <option name="/Default/Housekeeping/FeatureSuggestion/FeatureSuggestionManager/DisabledSuggesters/=SwitchToGoToActionSuggester/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/Housekeeping/OptionsDialog/SelectedPageId/@EntryValue" value="RiderCppLiveTemplatesSettings" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=366622EAC62491419D1073F916494E51/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=A91022E98771D44DA45FB61A812E1130/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3D954DCC3B11814185199A822DA545BA/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=366622EAC62491419D1073F916494E51/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=A91022E98771D44DA45FB61A812E1130/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=A91022E98771D44DA45FB61A812E1130/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3D954DCC3B11814185199A822DA545BA/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3D954DCC3B11814185199A822DA545BA/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=366622EAC62491419D1073F916494E51/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=A91022E98771D44DA45FB61A812E1130/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=366622EAC62491419D1073F916494E51/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=366622EAC62491419D1073F916494E51/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3D954DCC3B11814185199A822DA545BA/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=A91022E98771D44DA45FB61A812E1130/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3D954DCC3B11814185199A822DA545BA/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/CodeEditing/TypingAssist/Cpp/SlateSupportTypingAssist/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeEditing/TypingAssist/Cpp/GenerateDocumentationComment/@EntryValue" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=B003EBE9BE3ECF4289E4EAA2175A0486/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=7EC664DD87D92B4597E98D2DB47BF0DC/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=D44144EE6285F44D94D7484128770DEC/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=2B42B0BD9B6C0845B914AC7EF31DDCE1/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=51EFB78E7471874DA0C7F7087C8F1F8D/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=E4BACC11C2B72E4DAB892CA5CD0161AA/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=0EEF8267F81BD14BBD3E5312FEB45293/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=6B01AED8F19582469F927F25835CA893/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=DE85CCDB63FFC248B69647D5A36AEDB8/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=7636C2B87A8C284EAD7B4E5B95C9B915/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=DA5E4B7E77386B42ADE42AF7CABCB607/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=9F212813EA4C524295F7A151973F6832/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=23A4FEB909859043AE744EC79A2624E5/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=51EFB78E7471874DA0C7F7087C8F1F8D/Shortcut/@EntryValue" value="magic" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3CEB9CFC2F2AFB4BB9C5DAE1DF7121B9/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=2501A16C25404749963D36089AD5C46C/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=1C3A43E655EB174EB30E0744950BAE94/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=51EFB78E7471874DA0C7F7087C8F1F8D/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=314A4AAF1FA638478D3795920BC65EB7/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=A334C89806C7EA41A9842AEA755A9DB7/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=9AE4187A10660849A534A4BF86BB61B5/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=46AD0B4D8C7C8445B54FD5BCD7D1F21B/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=DF5B2F854E30D54D969DE885B4338CD6/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=B712E25B1C4ADB4FBD4D60477EA6444A/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=215E7054AB495A4F9AFB50ABDD50E987/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=96B82555995C7C47AA55871B4E64D487/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=F51E70F3E61CF14CBE0DE94FED26AD09/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=7DF8B2088E1D0246B5E236AD95AD4090/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=B81460205439F8439DE8AC4C1480C661/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=F411644CD8ED1340A033677904EAC951/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=7CD20DBF7DC01B40974323794F0E35FB/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=E6DA2A4EBD73704E995FB66ED5660C41/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=6ACA25203EC0A64DAB1BA4E6C572A94A/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=B8C148A7BD3562488391CEC28E4784D1/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=26AEB2AC3D6873478D13DB545CEB30E6/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4EC4C4D6A2258848A4F1EC77FB6589A1/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C4170D63CA9ABE45BDA20E3F191A2EF0/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=51EFB78E7471874DA0C7F7087C8F1F8D/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=20370653CA0B9C4983132DD98ACEB831/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=9E2E8B736004EF4B86BDBE65DD075270/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=D8AE6CE670584E408E899AF349F01058/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=FFD715E237AF37428377FDAF4F2D3F9E/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=DF0750B3C806424F81B1F5FF0F76131F/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=2FD2117524CB604DA0FA9713B379E446/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=51EFB78E7471874DA0C7F7087C8F1F8D/Text/@EntryValue" value="// Author: _Sherbiny&#10;&#10;#include &quot;bits/stdc++.h&quot;&#10;using namespace std;&#10;&#10;#ifdef DBG&#10;#include &quot;./debug.h&quot;&#10;#else&#10;#define dbg(...)&#10;#endif&#10;&#10;typedef long long ll;&#10;#define endl '\n'&#10;#define int ll&#10;//==================//&#10;&#10;void magic() {&#10;    $END$&#10;}&#10;&#10;signed main() {&#10;    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);&#10;    int t = 1;&#10;    cin &gt;&gt; t;&#10;    while (t--) magic();&#10;}&#10;" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=EC617072B5DF734B90D97E9BF357F620/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=A8590719E3E6D04290450219F7D60817/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=958F1EB766A9CE47A2A2C400A6B30CC5/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=51EFB78E7471874DA0C7F7087C8F1F8D/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=CDBF29CDA80D48448782848AEDD1BC52/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=07817C37CB56AE48867A81A8B43E3AE8/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=0760E25E04753C4799C6CC9F7DA9CAAB/@KeyIndexDefined" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=51EFB78E7471874DA0C7F7087C8F1F8D/Applicability/=Surround/@EntryIndexedValue" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=DF4EE290110033419295A1F6154F177B/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=DF4EE290110033419295A1F6154F177B/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=DF4EE290110033419295A1F6154F177B/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=DF4EE290110033419295A1F6154F177B/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=DF4EE290110033419295A1F6154F177B/Text/@EntryValue" value="struct Node {&#10;    int ign = 0, val;&#10;&#10;    Node() : val(ign) {};&#10;&#10;    Node(int x) : val(x) {};&#10;&#10;    void set(int x) {&#10;        val += x;&#10;    }&#10;};&#10;&#10;#define lNode (x * 2 + 1)&#10;#define rNode (x * 2 + 2)&#10;#define md (lx + (rx - lx) / 2)&#10;&#10;struct Sagara {&#10;    int n;&#10;    vector&lt;Node&gt; node;&#10;&#10;    Sagara(int sz) {&#10;        n = 1;&#10;        while (n &lt; sz) n *= 2;&#10;        node.assign(n * 2, Node());&#10;    }&#10;&#10;    Node merge(Node &amp;l, Node &amp;r) {&#10;        Node res = Node();&#10;        res.val = l.val + r.val;&#10;        return res;&#10;    }&#10;&#10;    void build(vector&lt;int&gt; &amp;v, int x, int lx, int rx) {&#10;        if (rx - lx == 1) {&#10;            if (lx &lt; v.size()) node[x] = Node(v[lx]);&#10;            return;&#10;        }&#10;&#10;        build(v, lNode, lx, md);&#10;        build(v, rNode, md, rx);&#10;        node[x] = merge(node[lNode], node[rNode]);&#10;    }&#10;&#10;    void build(vector&lt;int&gt; &amp;v) { build(v, 0, 0, n); }&#10;&#10;    void set(int &amp;ind, ll &amp;val, int x, int lx, int rx) {&#10;        if (rx - lx == 1) return node[x].set(val);&#10;&#10;        if (ind &lt; md) set(ind, val, lNode, lx, md);&#10;        else set(ind, val, rNode, md, rx);&#10;&#10;        node[x] = merge(node[lNode], node[rNode]);&#10;    }&#10;&#10;    void set(int ind, ll val) { set(ind, val, 0, 0, n); }&#10;&#10;    Node query(int &amp;l, int &amp;r, int x, int lx, int rx) {&#10;        if (lx &gt;= r || rx &lt;= l) return Node();&#10;        if (rx &lt;= r &amp;&amp; lx &gt;= l) return node[x];&#10;&#10;        Node L = query(l, r, lNode, lx, md);&#10;        Node R = query(l, r, rNode, md, rx);&#10;&#10;        return merge(L, R);&#10;    }&#10;&#10;    Node query(int l, int r) {&#10;        return query(l, r, 0, 0, n);&#10;    }&#10;};&#10;" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=DF4EE290110033419295A1F6154F177B/Shortcut/@EntryValue" value="segtree" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=F6C93FA9F74A6944B73C449B03DCDAAE/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=F6C93FA9F74A6944B73C449B03DCDAAE/Text/@EntryValue" value="template&lt;class T&gt;&#10;struct SparseTable {&#10;    // change mxLog&#10;    static const int mxLog = 21;&#10;    vector&lt;array&lt;T, mxLog&gt;&gt; table;&#10;    vector&lt;int&gt; lg;&#10;    int n;&#10;    &#10;    SparseTable(int sz) {&#10;        n = sz;&#10;        table.resize(n + 1);&#10;        lg.resize(n + 1);&#10;        for (int i = 0; i &lt;= n; ++i) lg[i] = __lg(i);&#10;    }&#10;&#10;    void build(vector&lt;T&gt; &amp;v) {&#10;        for (int i = 0; i &lt; n; ++i) table[i][0] = v[i];&#10;        for (int j = 1; j &lt; mxLog; ++j)&#10;            for (int i = 0; i + (1 &lt;&lt; j) - 1 &lt; n; ++i)&#10;                table[i][j] = merge(table[i][j - 1], table[i + (1 &lt;&lt; (j - 1))][j - 1]);&#10;    }&#10;&#10;    T merge(T &amp;l, T &amp;r) {&#10;        return min(l, r);&#10;    }&#10;&#10;    T query(int l, int r) {&#10;        int j = lg[r - l + 1];&#10;        return merge(table[l][j], table[r - (1 &lt;&lt; j) + 1][j]);&#10;    }&#10;};" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=F6C93FA9F74A6944B73C449B03DCDAAE/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=F6C93FA9F74A6944B73C449B03DCDAAE/Shortcut/@EntryValue" value="Sparse" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=F6C93FA9F74A6944B73C449B03DCDAAE/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=F6C93FA9F74A6944B73C449B03DCDAAE/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=BBB39E14ED74544E9074AC4529110848/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=BBB39E14ED74544E9074AC4529110848/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=BBB39E14ED74544E9074AC4529110848/Text/@EntryValue" value="// this supports update rect and get a single cell&#10;struct BIT2D {&#10;    int n, m;&#10;    vector&lt;vector&lt;int&gt;&gt; bit;&#10;&#10;    BIT2D(int _n, int _m) {&#10;        n = _n + 5, m = _m + 5;&#10;        bit.assign(n, vector&lt;int&gt;(m));&#10;    }&#10;&#10;    void updateY(int x, int ind, ll val) {&#10;        for (; ind &lt; m; ind |= (ind + 1))&#10;            bit[x][ind] += val;&#10;    }&#10;&#10;    void update(int x, int y, int val) {&#10;        for (; x &lt; n; x |= (x + 1))&#10;            updateY(x, y, val);&#10;    }&#10;&#10;    // pass it left, right, top, bottom, value&#10;    void updateRect(int l, int r, int t, int b, ll val) {&#10;        update(t, l, val);&#10;        update(t, r + 1, -val);&#10;        update(b + 1, l, -val);&#10;        update(b + 1, r + 1, val);&#10;    }&#10;&#10;    int getY(int x, int ind) {&#10;        int v = 0;&#10;        for (; ind &gt;= 0; ind = (ind &amp; (ind + 1)) - 1)&#10;            v += bit[x][ind];&#10;        return v;&#10;    }&#10;&#10;    int get(int x, int y) {&#10;        int v = 0;&#10;        for (; x &gt;= 0; x = (x &amp; (x + 1)) - 1)&#10;            v += getY(x, y);&#10;        return v;&#10;    }&#10;};&#10;" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=BBB39E14ED74544E9074AC4529110848/Shortcut/@EntryValue" value="BIT2D" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=BBB39E14ED74544E9074AC4529110848/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=BBB39E14ED74544E9074AC4529110848/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4D8D476B3EF8CC45B9EDF57E2E699228/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4D8D476B3EF8CC45B9EDF57E2E699228/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4D8D476B3EF8CC45B9EDF57E2E699228/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4D8D476B3EF8CC45B9EDF57E2E699228/Shortcut/@EntryValue" value="ConvexHull" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4D8D476B3EF8CC45B9EDF57E2E699228/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4D8D476B3EF8CC45B9EDF57E2E699228/Text/@EntryValue" value="const ll is_query = -(1LL&lt;&lt;62);&#10;struct line {&#10;    ll m, b;&#10;    mutable function&lt;const line*()&gt; succ;&#10;    bool operator&lt;(const line&amp; rhs) const {&#10;        if (rhs.b != is_query) return m &lt; rhs.m;&#10;        const line* s = succ();&#10;        if (!s) return 0;&#10;        ll x = rhs.m;&#10;        return b - s-&gt;b &lt; (s-&gt;m - m) * x;&#10;    }&#10;};&#10;&#10;struct dynamic_hull : public multiset&lt;line&gt; { // will maintain upper hull for maximum&#10;    const ll inf = LLONG_MAX;&#10;    bool bad(iterator y) {&#10;        auto z = next(y);&#10;        if (y == begin()) {&#10;            if (z == end()) return 0;&#10;            return y-&gt;m == z-&gt;m &amp;&amp; y-&gt;b &lt;= z-&gt;b;&#10;        }&#10;        auto x = prev(y);&#10;        if (z == end()) return y-&gt;m == x-&gt;m &amp;&amp; y-&gt;b &lt;= x-&gt;b;&#10;&#10;&#9;&#9;/* compare two lines by slope, make sure denominator is not 0 */&#10;        ll v1 = (x-&gt;b - y-&gt;b);&#10;        if (y-&gt;m == x-&gt;m) v1 = x-&gt;b &gt; y-&gt;b ? inf : -inf;&#10;        else v1 /= (y-&gt;m - x-&gt;m);&#10;        ll v2 = (y-&gt;b - z-&gt;b);&#10;        if (z-&gt;m == y-&gt;m) v2 = y-&gt;b &gt; z-&gt;b ? inf : -inf;&#10;        else v2 /= (z-&gt;m - y-&gt;m);&#10;        return v1 &gt;= v2;&#10;    }&#10;    void insert_line(ll m, ll b) {&#10;        auto y = insert({ m, b });&#10;        y-&gt;succ = [=] { return next(y) == end() ? 0 : &amp;*next(y); };&#10;        if (bad(y)) { erase(y); return; }&#10;        while (next(y) != end() &amp;&amp; bad(next(y))) erase(next(y));&#10;        while (y != begin() &amp;&amp; bad(prev(y))) erase(prev(y));&#10;    }&#10;    ll eval(ll x) {&#10;        auto l = *lower_bound((line) { x, is_query });&#10;        return l.m * x + l.b;&#10;    }&#10;};" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C1E285FA654E8D45BCFF753265BB30E5/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C1E285FA654E8D45BCFF753265BB30E5/Shortcut/@EntryValue" value="Lazy" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C1E285FA654E8D45BCFF753265BB30E5/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C1E285FA654E8D45BCFF753265BB30E5/Text/@EntryValue" value="struct Node {&#10;    int ign = 0, lazy = 0, val = ign;&#10;    bool isLazy = 0;&#10;&#10;    Node() {}&#10;&#10;    Node(ll x) : val(x) {}&#10;&#10;    void add(int x, int lx, int rx) {&#10;        val += x * (rx - lx);&#10;        lazy += x;&#10;        isLazy = 1;&#10;    }&#10;};&#10;&#10;#define lNode (x * 2 + 1)&#10;#define rNode (x * 2 + 2)&#10;#define md (lx + (rx - lx) / 2)&#10;&#10;struct Sagara {&#10;    int n;&#10;    vector&lt;Node&gt; node;&#10;&#10;    Sagara(int sz) {&#10;        n = 1;&#10;        while (n &lt; sz) n *= 2;&#10;        node.assign(n * 2, Node());&#10;    }&#10;&#10;    Node merge(Node &amp;l, Node &amp;r) {&#10;        Node res = Node();&#10;        res.val = l.val + r.val;&#10;        return res;&#10;    }&#10;&#10;    void build(vector&lt;int&gt; &amp;v, int x, int lx, int rx) {&#10;        if (rx - lx == 1) {&#10;            if (lx &lt; v.size()) node[x] = Node(v[lx]);&#10;            return;&#10;        }&#10;&#10;        build(v, lNode, lx, md);&#10;        build(v, rNode, md, rx);&#10;        node[x] = merge(node[lNode], node[rNode]);&#10;    }&#10;&#10;    void build(vector&lt;int&gt; &amp;v) { build(v, 0, 0, n); }&#10;&#10;    void propagate(int x, int lx, int rx) {&#10;        if (rx - lx == 1 || !node[x].isLazy) return;&#10;&#10;        node[lNode].add(node[x].lazy, lx, md);&#10;        node[rNode].add(node[x].lazy, md, rx);&#10;&#10;        node[x].isLazy = node[x].lazy = 0;&#10;    }&#10;&#10;    void update(int l, int r, ll val, int x, int lx, int rx) {&#10;        propagate(x, lx, rx);&#10;&#10;        if (lx &gt;= r || rx &lt;= l) return;&#10;        if (lx &gt;= l &amp;&amp; rx &lt;= r)&#10;            return node[x].add(val, lx, rx);&#10;&#10;        update(l, r, val, lNode, lx, md);&#10;        update(l, r, val, rNode, md, rx);&#10;&#10;        node[x] = merge(node[lNode], node[rNode]);&#10;    }&#10;&#10;    void update(int l, int r, ll val) { update(l, r, val, 0, 0, n); }&#10;&#10;    Node query(int l, int r, int x, int lx, int rx) {&#10;        propagate(x, lx, rx);&#10;&#10;        if (lx &gt;= l &amp;&amp; rx &lt;= r) return node[x];&#10;        if (lx &gt;= r || rx &lt;= l) return Node();&#10;&#10;        Node L = query(l, r, lNode, lx, md);&#10;        Node R = query(l, r, rNode, md, rx);&#10;&#10;        return merge(L, R);&#10;    }&#10;&#10;    Node query(int l, int r) {&#10;        return query(l, r, 0, 0, n);&#10;    }&#10;};" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C1E285FA654E8D45BCFF753265BB30E5/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C1E285FA654E8D45BCFF753265BB30E5/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C3042BD1CF8B764786AC2CBA926E04A4/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C3042BD1CF8B764786AC2CBA926E04A4/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C3042BD1CF8B764786AC2CBA926E04A4/Shortcut/@EntryValue" value="Matrix" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C3042BD1CF8B764786AC2CBA926E04A4/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C3042BD1CF8B764786AC2CBA926E04A4/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C3042BD1CF8B764786AC2CBA926E04A4/Text/@EntryValue" value="template&lt;class T&gt;&#10;struct Matrix {&#10;    int n, m;&#10;    vector&lt;vector&lt;T&gt;&gt; a;&#10;&#10;    Matrix(int _n, int _m) {&#10;        n = _n, m = _m;&#10;        a.assign(n, vector&lt;T&gt;(m));&#10;    }&#10;&#10;    Matrix operator *(const Matrix &amp;b) {&#10;        int r = n, c = b.m, k = m;&#10;        Matrix res(r, c);&#10;        for(int i = 0; i &lt; r; ++i)&#10;            for(int j = 0; j &lt; c; ++j)&#10;                for(int o = 0; o &lt; k; ++o)&#10;                    res.a[i][j] += a[i][o] * b.a[o][j];&#10;        return res;&#10;    }&#10;&#10;&#10;    friend Matrix power(Matrix mat, ll p) {&#10;        if(p == 0) {&#10;            Matrix ones(mat.n, mat.n);&#10;            for(int i = 0; i &lt; mat.n; ++i)&#10;                ones.a[i][i] = 1;&#10;            return ones;&#10;        }&#10;        Matrix ret = power(mat * mat, p / 2);&#10;        if(p&amp;1) ret = ret * mat;&#10;        return ret;&#10;    }&#10;&#10;    void display() {&#10;        for(int i = 0; i &lt; n; ++i) {&#10;            for(int j = 0; j &lt; m; ++j) cout &lt;&lt; a[i][j] &lt;&lt; ' ';&#10;            cout &lt;&lt; endl;&#10;        }&#10;    }&#10;};" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4617CD83AE4CE14FAEDABA3DB95F82F3/Text/@EntryValue" value="struct Node {&#10;    vector&lt;int&gt; v;&#10;&#10;    Node() {};&#10;&#10;    Node(int x) : v({x}) {};&#10;};&#10;&#10;#define lNode (x * 2 + 1)&#10;#define rNode (x * 2 + 2)&#10;#define md (lx + (rx - lx) / 2)&#10;&#10;struct MergeSortSagara {&#10;    vector&lt;Node&gt; node;&#10;    int n;&#10;&#10;    MergeSortSagara(int _n) {&#10;        n = 1;&#10;        while (n &lt; _n) n &lt;&lt;= 1;&#10;        node.assign(n * 2, Node());&#10;    }&#10;&#10;    Node merge(Node &amp;l, Node &amp;r) {&#10;        Node res;&#10;&#10;        int i = 0, j = 0;&#10;        while (i &lt; l.v.size() &amp;&amp; j &lt; r.v.size()) {&#10;            if (l.v[i] &lt; r.v[j]) res.v.push_back(l.v[i++]);&#10;            else res.v.push_back(r.v[j++]);&#10;        }&#10;&#10;        while (i &lt; l.v.size()) res.v.push_back(l.v[i++]);&#10;        while (j &lt; r.v.size()) res.v.push_back(r.v[j++]);&#10;        return res;&#10;    }&#10;&#10;    void build(vector&lt;int&gt; &amp;v, int x, int lx, int rx) {&#10;        if (rx - lx == 1) {&#10;            if (lx &lt; v.size()) node[x] = Node(v[lx]);&#10;            return;&#10;        }&#10;&#10;        build(v, lNode, lx, md);&#10;        build(v, rNode, md, rx);&#10;        node[x] = merge(node[lNode], node[rNode]);&#10;    }&#10;&#10;    void build(vector&lt;int&gt; &amp;v) { build(v, 0, 0, n); }&#10;&#10;    int query(int l, int r, int x, int lx, int rx, int val) {&#10;        if (rx &lt;= l || lx &gt;= r) return 0;&#10;        if (lx &gt;= l &amp;&amp; rx &lt;= r) return calc(node[x], val);&#10;        return query(l, r, lNode, lx, md, val) + query(l, r, rNode, md, rx, val);&#10;&#10;    }&#10;&#10;    int query(int l, int r, int val) {&#10;        return query(l, r, 0, 0, n, val);&#10;    }&#10;&#10;    // change this function to match your need&#10;    int calc(Node &amp;no, int val) {&#10;        return greater_than(no, val);&#10;    }&#10;&#10;    int less_than(Node &amp;no, int val) {&#10;        return lower_bound(no.v.begin(), no.v.end(), val) - no.v.begin();&#10;    }&#10;&#10;    int greater_than(Node &amp;no, int val) {&#10;        return no.v.size() - less_than(no, val) - equal(no, val);&#10;    }&#10;&#10;    int equal(Node &amp;no, int val) {&#10;        return upper_bound(no.v.begin(), no.v.end(), val) - lower_bound(no.v.begin(), no.v.end(), val);&#10;    }&#10;};" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=63C174E257C77343B463C4C29A1BD2BE/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4617CD83AE4CE14FAEDABA3DB95F82F3/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=63C174E257C77343B463C4C29A1BD2BE/Text/@EntryValue" value="struct Query {&#10;    int l, r, ind;&#10;};&#10;&#10;struct MO {&#10;    int n, sq, l, r;&#10;    ll curr;&#10;    vector&lt;int&gt; v;&#10;&#10;    MO(vector&lt;int&gt; &amp;_v) {&#10;        v = _v;&#10;        n = v.size();&#10;        sq = sqrt(n) + 1;&#10;        curr = 0;&#10;    };&#10;&#10;    void add(int i) {&#10;        //&#10;    }&#10;&#10;    void del(int i) {&#10;        // &#10;    }&#10;&#10;    void move(int &amp;lq, int &amp;rq) {&#10;        while (r &lt; rq) add(++r);&#10;        while (l &lt; lq) del(l++);&#10;        while (l &gt; lq) add(--l);&#10;        while (r &gt; rq) del(r--);&#10;    }&#10;&#10;    void solve(vector&lt;Query&gt; &amp;qu) {&#10;        sort(qu.begin(), qu.end(), [&amp;](auto &amp;lf, auto ri) {&#10;            if (lf.l / sq == ri.l / sq)&#10;                return lf.r &lt; ri.r;&#10;            return lf.l / sq &lt; ri.l / sq;&#10;        });&#10;&#10;        l = qu[0].l, r = qu[0].l;&#10;        add(l);&#10;&#10;        vector&lt;int&gt; res(qu.size());&#10;        for (auto &amp;[lq, rq, iq]: qu) {&#10;            move(lq, rq);&#10;            res[iq] = curr;&#10;        }&#10;&#10;        for (int &amp;i: res) cout &lt;&lt; i &lt;&lt; endl;&#10;    }&#10;};" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=63C174E257C77343B463C4C29A1BD2BE/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4617CD83AE4CE14FAEDABA3DB95F82F3/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4617CD83AE4CE14FAEDABA3DB95F82F3/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4617CD83AE4CE14FAEDABA3DB95F82F3/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=63C174E257C77343B463C4C29A1BD2BE/Shortcut/@EntryValue" value="MO" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=63C174E257C77343B463C4C29A1BD2BE/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=63C174E257C77343B463C4C29A1BD2BE/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4617CD83AE4CE14FAEDABA3DB95F82F3/Shortcut/@EntryValue" value="MergeSortTree" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=ABB3E7F16D1A8341A89689E95FE6D6DB/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=ABB3E7F16D1A8341A89689E95FE6D6DB/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=ABB3E7F16D1A8341A89689E95FE6D6DB/Text/@EntryValue" value="#include&lt;ext/pb_ds/assoc_container.hpp&gt;&#10;#include&lt;ext/pb_ds/tree_policy.hpp&gt;&#10;&#10;using namespace __gnu_pbds;&#10;&#10;template&lt;typename T&gt;&#10;using ordered_set = tree&lt;T, null_type, less&lt;T&gt;, rb_tree_tag, tree_order_statistics_node_update&gt;;&#10;&#10;void myErase(ordered_set&lt;int&gt; &amp;t, int v){&#10;    int rank = t.order_of_key(v);&#10;    ordered_set&lt;int&gt;::iterator it = t.find_by_order(rank);&#10;    t.erase(it);&#10;}" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=ABB3E7F16D1A8341A89689E95FE6D6DB/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=ABB3E7F16D1A8341A89689E95FE6D6DB/Shortcut/@EntryValue" value="OrderedSet" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=ABB3E7F16D1A8341A89689E95FE6D6DB/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=264C9186FA493F48BFE0927336EC632F/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=264C9186FA493F48BFE0927336EC632F/Shortcut/@EntryValue" value="PST" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=264C9186FA493F48BFE0927336EC632F/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=264C9186FA493F48BFE0927336EC632F/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=264C9186FA493F48BFE0927336EC632F/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=264C9186FA493F48BFE0927336EC632F/Text/@EntryValue" value="struct PST {&#10;    // root[query_index] returns the root of the version of this query&#10;    // L[x], R[x] are the id's of x left and right child&#10;    vector&lt;int&gt; node, L, R, root;&#10;    int n, curr;&#10;&#10;    const int ign = 0; // change this accordigly&#10;&#10;    PST(int _n, int q) {&#10;        const int LOG = 30;&#10;        n = _n;&#10;        root.reserve(q + 10);&#10;        L.resize(n * LOG);&#10;        R.resize(n * LOG);&#10;        node.resize(n * LOG);&#10;        curr = 0;&#10;    }&#10;&#10;    int merge(int lf, int ri) {&#10;        return lf + ri;&#10;    }&#10;&#10;    // initialize version zero&#10;    int init(int lx, int rx) {&#10;        int id = curr++;&#10;        if (rx - lx &lt; 2)&#10;            return node[id] = ign, id;&#10;&#10;        int md = (lx + rx) / 2;&#10;        L[id] = init(lx, md);&#10;        R[id] = init(md, rx);&#10;&#10;        node[id] = merge(node[L[id]], node[R[id]]);&#10;        return id;&#10;    }&#10;&#10;    void init() {&#10;        root.push_back(init(0, n));&#10;    }&#10;&#10;    int set(int ind, int val, int x, int lx, int rx) {&#10;        if (ind &gt;= rx || ind &lt; lx) return x;&#10;&#10;        int id = curr++;&#10;        if (rx - lx &lt; 2) {&#10;            node[id] = val;&#10;            return id;&#10;        }&#10;&#10;        int md = (rx + lx) / 2;&#10;        L[id] = set(ind, val, L[x], lx, md);&#10;        R[id] = set(ind, val, R[x], md, rx);&#10;&#10;        node[id] = merge(node[L[id]], node[R[id]]);&#10;        return id;&#10;    }&#10;&#10;    int set(int ind, int val, int version = -1) {&#10;        if (~version) {&#10;            root[version] = set(ind, val, root[version], 0, n);&#10;            return version;&#10;        }&#10;&#10;        root.push_back(set(ind, val, root.back(), 0, n)); // work on the latest version&#10;        return root.size() - 1;&#10;    }&#10;&#10;    int query(int l, int r, int x, int lx, int rx) {&#10;        if (rx &lt;= l || lx &gt;= r) return ign;&#10;        if (rx &lt;= r &amp;&amp; lx &gt;= l) return node[x];&#10;        int md = (lx + rx) / 2;&#10;        return merge(query(l, r, L[x], lx, md), query(l, r, R[x], md, rx));&#10;    }&#10;&#10;    int query(int l, int r, int version = -1) {&#10;        if (~version)&#10;            return query(l, r, root[version], 0, n);&#10;        else&#10;            return query(l, r, root.back(), 0, n);&#10;    }&#10;};&#10;" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=474AF31C4369FF438BFDABD057AB3536/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=474AF31C4369FF438BFDABD057AB3536/Shortcut/@EntryValue" value="Seg2D" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=474AF31C4369FF438BFDABD057AB3536/Text/@EntryValue" value="struct Node {&#10;    ll ign = 0, val;&#10;&#10;    Node() : val(ign) {}&#10;&#10;    Node(ll x) : val(x) {}&#10;&#10;    Node operator+(Node &amp;r) {&#10;        Node res = Node();&#10;        res.val = val + r.val;&#10;        return res;&#10;    }&#10;};&#10;&#10;#define lNode (x * 2 + 1)&#10;#define rNode (x * 2 + 2)&#10;#define md (lx + (rx - lx) / 2)&#10;&#10;struct Sagara {&#10;    int n;&#10;    vector&lt;Node&gt; node;&#10;&#10;    Sagara(int sz) {&#10;        n = 1;&#10;        while (n &lt; sz) n *= 2;&#10;        node.assign(n * 2, Node());&#10;    }&#10;&#10;    void set(int &amp;ind, ll &amp;val, int x, int lx, int rx) {&#10;        if (rx - lx == 1) {&#10;            node[x] = Node(val);&#10;            return;&#10;        }&#10;&#10;        if (ind &lt; md) set(ind, val, lNode, lx, md);&#10;        else set(ind, val, rNode, md, rx);&#10;&#10;        node[x] = node[lNode] + node[rNode];&#10;    }&#10;&#10;    void set(int ind, ll val) {&#10;        set(ind, val, 0, 0, n);&#10;    }&#10;&#10;    Node get(int &amp;i) {&#10;        return node[n + i - 1];&#10;    }&#10;&#10;    Node query(int &amp;l, int &amp;r, int x, int lx, int rx) {&#10;        if (lx &gt;= r || rx &lt;= l) return Node();&#10;        if (rx &lt;= r &amp;&amp; lx &gt;= l) return node[x];&#10;        Node L = query(l, r, lNode, lx, md);&#10;        Node R = query(l, r, rNode, md, rx);&#10;        return L + R;&#10;    }&#10;&#10;    Node query(int l, int r) {&#10;        return query(l, r, 0, 0, n);&#10;    }&#10;};&#10;&#10;struct Sagara2D {&#10;    vector&lt;Sagara&gt; node;&#10;    int n;&#10;&#10;    Sagara2D(int _n, int _m) {&#10;        n = 1;&#10;        while (n &lt; _n) n &lt;&lt;= 1;&#10;        node.assign(n * 2, Sagara(_m));&#10;    }&#10;&#10;    void set(int i, int j, int val, int x, int lx, int rx) {&#10;        if (rx - lx == 1)&#10;            return node[x].set(j, val);&#10;&#10;        if (i &lt; md) set(i, j, val, lNode, lx, md);&#10;        else set(i, j, val, rNode, md, rx);&#10;&#10;        Node L = node[lNode].get(j);&#10;        Node R = node[rNode].get(j);&#10;&#10;        node[x].set(j, (L + R).val);&#10;    }&#10;&#10;    void set(int i, int j, int val) {&#10;        set(i, j, val, 0, 0, n);&#10;    }&#10;&#10;    // r and b are not included&#10;    int query(int t, int b, int l, int r, int x, int lx, int rx) {&#10;        if (rx &lt;= t || lx &gt;= b) return 0;&#10;        if (lx &gt;= t &amp;&amp; rx &lt;= b)&#10;            return node[x].query(l, r).val;&#10;&#10;        int L = query(t, b, l, r, lNode, lx, md);&#10;        int R = query(t, b, l, r, rNode, md, rx);&#10;&#10;        return L + R;&#10;    }&#10;&#10;    // top, bottom, right, left&#10;    int query(int t, int b, int r, int l) {&#10;        return query(t, b, r, l, 0, 0, n);&#10;    }&#10;};" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=474AF31C4369FF438BFDABD057AB3536/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=474AF31C4369FF438BFDABD057AB3536/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=474AF31C4369FF438BFDABD057AB3536/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C06250F6DB01FD48AFDA09EF9A108D24/Shortcut/@EntryValue" value="MonoStack" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C06250F6DB01FD48AFDA09EF9A108D24/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C06250F6DB01FD48AFDA09EF9A108D24/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C06250F6DB01FD48AFDA09EF9A108D24/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C06250F6DB01FD48AFDA09EF9A108D24/Text/@EntryValue" value="vector&lt;int&gt; nextGreater(vector&lt;int&gt; &amp;v) {&#10;    int n = v.size();&#10;    vector&lt;int&gt; res(n, n);&#10;    stack&lt;int&gt; st;&#10;    for (int i = 0; i &lt; n; ++i) {&#10;        if (st.empty() || v[i] &lt;= v[st.top()]) st.push(i);&#10;        else {&#10;            res[st.top()] = i;&#10;            st.pop();&#10;            --i;&#10;        }&#10;    }&#10;    return res;&#10;}&#10; &#10;vector&lt;int&gt; prevGreater(vector&lt;int&gt; &amp;v) {&#10;    int n = v.size();&#10;    vector&lt;int&gt; res(n, -1);&#10;    stack&lt;int&gt; st;&#10;    for (int i = n - 1; i &gt;= 0; --i) {&#10;        // you may need to remove the equal&#10;        if (st.empty() || v[i] &lt;= v[st.top()]) st.push(i);&#10;        else {&#10;            res[st.top()] = i;&#10;            st.pop();&#10;            ++i;&#10;        }&#10;    }&#10;    return res;&#10;}" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C06250F6DB01FD48AFDA09EF9A108D24/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=09C745BBD51A7F409CDF97C8C8F3F3C8/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=09C745BBD51A7F409CDF97C8C8F3F3C8/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=09C745BBD51A7F409CDF97C8C8F3F3C8/Shortcut/@EntryValue" value="SOSDP" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=09C745BBD51A7F409CDF97C8C8F3F3C8/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=09C745BBD51A7F409CDF97C8C8F3F3C8/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=09C745BBD51A7F409CDF97C8C8F3F3C8/Text/@EntryValue" value="const int B = 20;&#10;const int M = 1 &lt;&lt; B;&#10;&#10;// subset contribute to its superset&#10;void forward(vector&lt;int&gt; &amp;dp) {&#10;    for (int i = 0; i &lt; B; ++i)&#10;        for (int m = 0; m &lt; M; ++m)&#10;            if (m &amp; (1 &lt;&lt; i))&#10;                dp[m] += dp[m ^ (1 &lt;&lt; i)];&#10;}&#10;&#10;// superset contribute to its subset&#10;void forwardRev(vector&lt;int&gt; &amp;dp) {&#10;    for (int i = 0; i &lt; B; ++i)&#10;        for (int m = M - 1; ~m; --m)&#10;            if (m &amp; (1 &lt;&lt; i))&#10;                dp[m ^ (1 &lt;&lt; i)] += dp[m];&#10;}&#10;&#10;// remove subset contribution from superset&#10;void backward(vector&lt;int&gt; &amp;dp) {&#10;    for (int i = 0; i &lt; B; ++i)&#10;        for (int m = M - 1; ~m; --m)&#10;            if (m &amp; (1 &lt;&lt; i))&#10;                dp[m] -= dp[m ^ (1 &lt;&lt; i)];&#10;}&#10;&#10;// remove superset contribution from subset&#10;void backwardRev(vector&lt;int&gt; &amp;dp) {&#10;    for (int i = 0; i &lt; B; ++i)&#10;        for (int m = 0; m &lt; M; ++m)&#10;            if (m &amp; (1 &lt;&lt; i))&#10;                dp[m ^ (1 &lt;&lt; i)] -= dp[m];&#10;}" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=20486EBE9358144FAF532C124155DC10/Shortcut/@EntryValue" value="SubmaskLoop" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=20486EBE9358144FAF532C124155DC10/Text/@EntryValue" value="for (int s = mask; s; s = (s - 1) &amp; mask) {&#10;    $END$&#10;}" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=20486EBE9358144FAF532C124155DC10/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=20486EBE9358144FAF532C124155DC10/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=20486EBE9358144FAF532C124155DC10/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=20486EBE9358144FAF532C124155DC10/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=944FC2295497B64E8166539D0C411CCD/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=944FC2295497B64E8166539D0C411CCD/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=944FC2295497B64E8166539D0C411CCD/Shortcut/@EntryValue" value="DSU" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=944FC2295497B64E8166539D0C411CCD/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=944FC2295497B64E8166539D0C411CCD/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=944FC2295497B64E8166539D0C411CCD/Text/@EntryValue" value="struct DSU {&#10;    int n;&#10;    int cnt;&#10;    vector&lt;int&gt; parent, size;&#10;&#10;    DSU(int sz) {&#10;        n = sz;&#10;        cnt = 0;&#10;        parent.resize(n + 1);&#10;        size.resize(n + 1);&#10;    }&#10;&#10;    void init() {&#10;        for(int u = 1; u &lt;= n; ++u)&#10;            makeSet(u);&#10;    }&#10;&#10;    void makeSet(int u) {&#10;        if(!size[u]) cnt++;&#10;        parent[u] = u;&#10;        size[u] = 1;&#10;    }&#10;&#10;    int find(int u) {&#10;        if(u == parent[u]) return u;&#10;        return parent[u] = find(parent[u]);&#10;    }&#10;&#10;    void merge(int u, int v) {&#10;        int uP = find(u), vP = find(v);&#10;        if(vP == uP) return;&#10;&#10;        if(size[vP] &gt; size[uP]) swap(uP, vP);&#10;        size[uP] += size[vP];&#10;        parent[vP] = uP;&#10;        cnt--;&#10;    }&#10;};" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=08C84B8C69DC6A4996752147D5D938BB/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=08C84B8C69DC6A4996752147D5D938BB/Text/@EntryValue" value="template&lt;class T&gt;&#10;using minPQ = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;&gt;&gt;;" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=08C84B8C69DC6A4996752147D5D938BB/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=08C84B8C69DC6A4996752147D5D938BB/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=08C84B8C69DC6A4996752147D5D938BB/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=08C84B8C69DC6A4996752147D5D938BB/Shortcut/@EntryValue" value="MinPQ" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=A186B1B90874314A8AB3BC1A22F4CA24/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=A186B1B90874314A8AB3BC1A22F4CA24/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=A186B1B90874314A8AB3BC1A22F4CA24/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=A186B1B90874314A8AB3BC1A22F4CA24/Shortcut/@EntryValue" value="Dijkstra" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=A186B1B90874314A8AB3BC1A22F4CA24/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=A186B1B90874314A8AB3BC1A22F4CA24/Text/@EntryValue" value="template&lt;class T&gt;&#10;using minPQ = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;&gt;&gt;;&#10;&#10;vector&lt;int&gt; dijkstra(int src, int n) {&#10;    vector&lt;int&gt; dist(n + 1, oo);&#10;    minPQ&lt;pair&lt;int, int&gt;&gt; pq;&#10;    dist[src] = 0;&#10;    pq.emplace(0, src);&#10;&#10;    while(!pq.empty()) {&#10;        auto [cost, u] = pq.top();&#10;        pq.pop();&#10;&#10;        if(dist[u] &lt; cost) continue;&#10;&#10;        for(auto [v, w] : adj[u]) {&#10;            if(dist[u] + w &gt;= dist[v]) continue;&#10;            dist[v] = dist[u] + w;&#10;            pq.emplace(dist[v], v);&#10;        }&#10;    }&#10;&#10;    return dist;&#10;}" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=E4D566954EDD7D4B846D86C6294A00CA/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=E4D566954EDD7D4B846D86C6294A00CA/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=E4D566954EDD7D4B846D86C6294A00CA/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=E4D566954EDD7D4B846D86C6294A00CA/Text/@EntryValue" value="const int MOD = 1e9 + 7;&#10;struct mint {&#10;    int value;&#10;    mint(int v = 0) { value = v % MOD; if(value &lt; 0) value += MOD; }&#10;    mint(int a, int b) : value(0) { *this += a; *this /= b; }&#10;&#10;    mint&amp; operator+=(mint const&amp; b) { value += b.value; if(value &gt;= MOD) value -= MOD; return *this; }&#10;    mint&amp; operator-=(mint const&amp; b) { value -= b.value; if(value &lt; 0) value += MOD; return *this; }&#10;    mint&amp; operator*=(mint const&amp; b) { value = 1ll * value * b.value % MOD; return *this; }&#10;&#10;    friend mint power(mint a, ll e) {&#10;        mint res = 1; while(e) { if(e &amp; 1) res *= a; a *= a; e &gt;&gt;= 1; }&#10;        return res;&#10;    }&#10;    friend mint inv(mint a) { return power(a, MOD - 2); }&#10;&#10;    mint &amp;operator/=(mint const&amp; b) { return *this *= inv(b); }&#10;    friend mint operator+(mint a, mint const b) { return a += b; }&#10;    friend mint operator-(mint a, mint const b) { return a -= b; }&#10;    friend mint operator-(mint const a) { return 0 - a; }&#10;    friend mint operator*(mint a, mint const b) { return a *= b; }&#10;    friend mint operator/(mint a, mint const b) { return a /= b; }&#10;    friend ostream&amp; operator&lt;&lt;(ostream&amp; os, mint const&amp; a) { return os &lt;&lt; a.value; }&#10;    friend bool operator==(mint const &amp;a, mint const&amp; b) { return a.value == b.value; }&#10;    friend bool operator!=(mint const&amp; a, mint const&amp; b) { return a.value != b.value; }&#10;};" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=E4D566954EDD7D4B846D86C6294A00CA/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=E4D566954EDD7D4B846D86C6294A00CA/Shortcut/@EntryValue" value="MINT" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=929D867F925C4C48803E74AA3DF6FD60/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=929D867F925C4C48803E74AA3DF6FD60/Shortcut/@EntryValue" value="Comb" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=929D867F925C4C48803E74AA3DF6FD60/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=929D867F925C4C48803E74AA3DF6FD60/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=929D867F925C4C48803E74AA3DF6FD60/Text/@EntryValue" value="struct Comb {&#10;    vector&lt;mint&gt; fact, invr;&#10;    Comb(int n) {&#10;        fact.assign(n + 5, 1), invr.assign(n + 5, 1);&#10;        for (int i = 1; i &lt;= n; ++i) fact[i]=fact[i-1]*i,invr[i]=inv(fact[i]);&#10;    }&#10;    mint nPr(int n, int r) {return n&lt;r?0:fact[n]*invr[n - r];}&#10;    mint nCr(int n, int r) {return nPr(n, r)*invr[r];}&#10;    mint SAndBars(int n, int k) {return min(n, k)&lt;0?0:nCr(n+k-1, k-1);}&#10;};" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=929D867F925C4C48803E74AA3DF6FD60/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=2828076208FA714784C5F08931A2F1DE/Shortcut/@EntryValue" value="Sieve" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=2828076208FA714784C5F08931A2F1DE/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=2828076208FA714784C5F08931A2F1DE/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=2828076208FA714784C5F08931A2F1DE/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=2828076208FA714784C5F08931A2F1DE/Text/@EntryValue" value="vector&lt;int&gt; pr, low;&#10;&#10;void Sieve(int n) {&#10;    low.assign(n + 1, 0);&#10;&#10;    for (int i = 2; i &lt;= n; ++i) {&#10;        if (!low[i]) {&#10;            low[i] = i;&#10;            pr.push_back(i);&#10;        }&#10;&#10;        for (int &amp;j: pr) {&#10;            if (j &gt; low[i] || i * j &gt; n) break;&#10;            low[j * i] = j;&#10;        }&#10;    }&#10;}" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=2828076208FA714784C5F08931A2F1DE/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=B0F8BE2A58EA81409D95373874180496/Text/@EntryValue" value="// mx char&#10;const int MX = 26;&#10;&#10;struct Trie {&#10;    struct Node {&#10;        array&lt;int, MX&gt; nxt;&#10;        vector&lt;int&gt; pat;&#10;        int f = 0;&#10;&#10;        Node() { nxt.fill(-1); }&#10;    };&#10;&#10;    vector&lt;Node&gt; node;&#10;    int start = 'a';&#10;&#10;    Trie() {&#10;        node.resize(1);&#10;    }&#10;&#10;    void add(string &amp;s, int &amp;i) {&#10;        int v = 0;&#10;        for (char ch: s) {&#10;            int c = ch - start;&#10;            if (node[v].nxt[c] == -1) {&#10;                node[v].nxt[c] = node.size();&#10;                node.emplace_back();&#10;            }&#10;            v = node[v].nxt[c];&#10;        }&#10;&#10;        node[v].pat.push_back(i);&#10;    }&#10;};&#10;&#10;&#10;struct AhoCorasick : public Trie {&#10;&#10;    AhoCorasick(vector&lt;string&gt; &amp;pat) {&#10;        for (int i = 0; i &lt; pat.size(); ++i)&#10;            add(pat[i], i);&#10;        build();&#10;    }&#10;&#10;    int move(int &amp;curr, int &amp;c) {&#10;        int f = node[curr].f;&#10;        while (node[f].nxt[c] == -1 &amp;&amp; f) f = node[f].f;&#10;        return node[f].nxt[c] == -1 ? 0 : node[f].nxt[c];&#10;    }&#10;&#10;    void build() {&#10;        queue&lt;int&gt; q;&#10;&#10;        for (int i = 0; i &lt; MX; i++) {&#10;            if (~node[0].nxt[i])&#10;                q.push(node[0].nxt[i]);&#10;        }&#10;&#10;        while (!q.empty()) {&#10;            int curr = q.front();&#10;            q.pop();&#10;&#10;            for (int i = 0; i &lt; MX; i++) {&#10;                int nxt = node[curr].nxt[i];&#10;                if (nxt == -1) continue;&#10;&#10;                int f = move(curr, i);&#10;                node[nxt].f = f;&#10;&#10;                for (auto &amp;j: node[f].pat)&#10;                    node[nxt].pat.push_back(j);&#10;&#10;                q.push(nxt);&#10;            }&#10;        }&#10;    }&#10;};" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=B0F8BE2A58EA81409D95373874180496/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=B0F8BE2A58EA81409D95373874180496/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=B0F8BE2A58EA81409D95373874180496/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=B0F8BE2A58EA81409D95373874180496/Shortcut/@EntryValue" value="AhoCorasick" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=B0F8BE2A58EA81409D95373874180496/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=9D068814D1502A41A6CF20D85665598C/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=9D068814D1502A41A6CF20D85665598C/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=9D068814D1502A41A6CF20D85665598C/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=9D068814D1502A41A6CF20D85665598C/Shortcut/@EntryValue" value="Pragma" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=9D068814D1502A41A6CF20D85665598C/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=9D068814D1502A41A6CF20D85665598C/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=9D068814D1502A41A6CF20D85665598C/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=9D068814D1502A41A6CF20D85665598C/Text/@EntryValue" value="#pragma GCC optimize(&quot;O3&quot;)&#10;#pragma GCC optimize(&quot;Ofast,unroll-loops&quot;)&#10;#pragma GCC target(&quot;avx2,bmi,bmi2,lzcnt,popcnt&quot;)&#10;#pragma GCC target(&quot;avx,avx2,fma&quot;)&#10;" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3E48ED36D17BE74EBB7B876BAD5DCE54/Shortcut/@EntryValue" value="Hash" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3E48ED36D17BE74EBB7B876BAD5DCE54/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3E48ED36D17BE74EBB7B876BAD5DCE54/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3E48ED36D17BE74EBB7B876BAD5DCE54/Text/@EntryValue" value="mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());&#10;#define getrand(l, r) uniform_int_distribution&lt;long long&gt;(l, r)(rng)&#10;&#10;const int c = 2;&#10;typedef array&lt;int, c&gt; H;&#10;&#10;struct Hash {&#10;    int mod[c], base[c];&#10;    vector&lt;H&gt; pw, inv;&#10;    int N, st;&#10;&#10;    Hash(int _n, int _s) {&#10;        N = _n + 1;&#10;        st = _s - 1;&#10;        pw.resize(N);&#10;        inv.resize(N);&#10;        pre();&#10;    }&#10;&#10;    void gen(int k) {&#10;        auto check = [](int x) {&#10;            for (int i = 2; i * i &lt;= x; ++i)&#10;                if (!(x % i)) return false;&#10;            return true;&#10;        };&#10;        mod[k] = getrand(1e8, 2e9);&#10;        base[k] = getrand(30, 120);&#10;        while (!check(mod[k]))--mod[k];&#10;    }&#10;&#10;    void pre() {&#10;        for (int k = 0; k &lt; c; ++k) {&#10;            gen(k);&#10;            pw[0][k] = inv[0][k] = 1;&#10;            int invB = power(base[k], mod[k] - 2, k);&#10;            for (int i = 1; i &lt; N; ++i) {&#10;                pw[i][k] = mul(pw[i - 1][k], base[k], k);&#10;                inv[i][k] = mul(inv[i - 1][k], invB, k);&#10;            }&#10;        }&#10;    }&#10;&#10;    vector&lt;H&gt; build(string &amp;s) {&#10;        int n = s.size();&#10;        vector&lt;H&gt; hash(n);&#10;        for (int k = 0; k &lt; c; ++k) {&#10;            hash[0][k] = mul(s[0] - st, pw[0][k], k);&#10;            for (int i = 1; i &lt; n; ++i)&#10;                hash[i][k] = add(hash[i - 1][k], mul((s[i] - st), pw[i][k], k), k);&#10;        }&#10;        return hash;&#10;    }&#10;&#10;    H getFullHash(string &amp;s) {&#10;        int n = s.size();&#10;        H res;&#10;        for (int k = 0; k &lt; c; ++k) {&#10;            res[k] = mul(s[0] - st, pw[0][k], k);&#10;            for (int i = 1; i &lt; n; ++i)&#10;                res[k] = add(res[k], mul((s[i] - st), pw[i][k], k), k);&#10;        }&#10;        return res;&#10;    }&#10;&#10;    // hash value of the string s[l, r] both l, r included&#10;    H getHash(int l, int r, vector&lt;H&gt; &amp;hash) {&#10;        H res;&#10;        for (int k = 0; k &lt; c; ++k) {&#10;            res[k] = hash[r][k];&#10;            if (l) {&#10;                res[k] = add(res[k], -hash[l - 1][k], k);&#10;                res[k] = mul(res[k], inv[l][k], k);&#10;            }&#10;        }&#10;        return res;&#10;    }&#10;&#10;    void concat(H &amp;l, H &amp;r, int lSize) {&#10;        for (int k = 0; k &lt; c; ++k)&#10;            l[k] = add(l[k], mul(r[k], pw[lSize][k], k), k);&#10;    }&#10;    &#10;    int add(int a, int b, int &amp;k) {&#10;        ll ans = (ll) a + b;&#10;        if (ans &gt;= mod[k]) ans -= mod[k];&#10;        if (ans &lt; 0) ans += mod[k];&#10;        return ans;&#10;    }&#10;&#10;    int mul(int a, int b, int &amp;k) {&#10;        return (1ll * a * b) % mod[k];&#10;    }&#10;&#10;    int power(int a, int b, int &amp;k) {&#10;        int res = 1;&#10;        while (b) {&#10;            if (b &amp; 1) res = mul(res, a, k);&#10;            a = mul(a, a, k), b &gt;&gt;= 1;&#10;        }&#10;        return res;&#10;    }&#10;};" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3E48ED36D17BE74EBB7B876BAD5DCE54/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3E48ED36D17BE74EBB7B876BAD5DCE54/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=199D9849AE65A34789BE4DB115857108/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=199D9849AE65A34789BE4DB115857108/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=199D9849AE65A34789BE4DB115857108/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=199D9849AE65A34789BE4DB115857108/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=199D9849AE65A34789BE4DB115857108/Shortcut/@EntryValue" value="SuffixArray" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=199D9849AE65A34789BE4DB115857108/Text/@EntryValue" value="struct SuffixArray {&#10;    int n;&#10;    vector&lt;int&gt; suff, lcp;&#10;&#10;    SuffixArray(int sz) {&#10;        n = sz + 1;&#10;        suff.resize(n);&#10;        lcp.resize(n);&#10;    }&#10;&#10;    void countingSort(vector&lt;int&gt; &amp;p, vector&lt;int&gt; &amp;c) {&#10;        vector&lt;int&gt; cnt(n), pos(n), newP(n);&#10;        for(int i : c) cnt[i]++;&#10;        for(int i = 1; i &lt; n; ++i) pos[i] = pos[i-1] + cnt[i-1];&#10;        for(int i : p) newP[pos[c[i]]++] = i;&#10;        p = newP;&#10;    }&#10;&#10;    void build(string &amp;s) {&#10;        s += '$';&#10;        vector&lt;int&gt; c(n);&#10;        vector&lt;pair&lt;char, int&gt;&gt; a(n);&#10;&#10;        for(int i = 0; i &lt; n; ++i)&#10;            a[i] = {s[i], i};&#10;&#10;        sort(a.begin(), a.end());&#10;&#10;        vector&lt;int&gt; p(n);&#10;        for(int i = 0; i &lt; n; ++i)&#10;            p[i] = a[i].second;&#10;&#10;        for(int i = 1; i &lt; n; ++i)&#10;            c[a[i].second] = c[a[i-1].second] + (a[i].first != a[i-1].first);&#10;&#10;        int k = 0;&#10;        while((1&lt;&lt;k) &lt; n) {&#10;            int bit = 1&lt;&lt;k;&#10;&#10;            for(int i = 0; i &lt; n; ++i)&#10;                p[i] = (p[i] - bit + n) % n;&#10;&#10;            countingSort(p, c);&#10;&#10;            vector&lt;int&gt; newC(n);&#10;            for(int i = 1; i &lt; n; ++i) {&#10;                int currL = p[i], currR = (p[i] + bit) % n;&#10;                int preL  = p[i-1], preR = (p[i-1] + bit) % n;&#10;                bool add = (c[currL] != c[preL]) || (c[currR] != c[preR]);&#10;                newC[p[i]] = newC[p[i-1]] + add;&#10;            }&#10;&#10;            c = newC;&#10;            ++k;&#10;        }&#10;&#10;        suff = p;&#10;&#10;        // Build LCP&#10;        k = 0;&#10;        for(int i = 0; i &lt; n - 1; ++i) {&#10;            int pi = c[i], j = p[pi - 1];&#10;            while(s[i+k] == s[j+k]) ++k;&#10;            lcp[pi] = k;&#10;            k = max(0LL, k - 1);&#10;        }&#10;&#10;        s.pop_back();&#10;    }&#10;};" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=199D9849AE65A34789BE4DB115857108/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=199D9849AE65A34789BE4DB115857108/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=22D58E25ADD69B4B94201B3C7955127B/Shortcut/@EntryValue" value="Trie" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=22D58E25ADD69B4B94201B3C7955127B/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=22D58E25ADD69B4B94201B3C7955127B/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=22D58E25ADD69B4B94201B3C7955127B/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=22D58E25ADD69B4B94201B3C7955127B/Text/@EntryValue" value="struct Trie {&#10;    struct Node {&#10;        array&lt;int, 26&gt; nxt;&#10;        int pref = 0, end = 0;&#10;        Node() {nxt.fill(-1);}&#10;    };&#10;&#10;    vector&lt;Node&gt; node;&#10;    int start = 'a';&#10;&#10;    Trie(): node({ Node() }) {}&#10;&#10;    void add(string &amp;s) {&#10;        int v = 0;&#10;        for(char ch : s) {&#10;            int c = ch - start;&#10;            if(node[v].nxt[c] == -1) {&#10;                node[v].nxt[c] = node.size();&#10;                node.emplace_back();&#10;            }&#10;            v = node[v].nxt[c];&#10;            node[v].pref++;&#10;        }&#10;        node[v].end++;&#10;    }&#10;};" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=22D58E25ADD69B4B94201B3C7955127B/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=CF93D914ECDAE4468EF9A8572C6D0A91/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=CF93D914ECDAE4468EF9A8572C6D0A91/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=CF93D914ECDAE4468EF9A8572C6D0A91/Shortcut/@EntryValue" value="HLD" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=CF93D914ECDAE4468EF9A8572C6D0A91/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=CF93D914ECDAE4468EF9A8572C6D0A91/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=CF93D914ECDAE4468EF9A8572C6D0A91/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=CF93D914ECDAE4468EF9A8572C6D0A91/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=CF93D914ECDAE4468EF9A8572C6D0A91/Text/@EntryValue" value="vector&lt;vector&lt;int&gt;&gt; adj;&#10;vector&lt;int&gt; par, depth, pos, sz, heavy, head, val;&#10;int cnt = 0;&#10;&#10;void dfs(int u, int p, int d = 0) {&#10;    par[u] = p, depth[u] = d, sz[u] = 1;&#10;&#10;    int mx = 0;&#10;    for (int &amp;v: adj[u]) {&#10;        if (v == p) continue;&#10;        dfs(v, u, d + 1);&#10;        if (sz[v] &gt; mx) heavy[u] = v, mx = sz[v];&#10;        sz[u] += sz[v];&#10;    }&#10;}&#10;&#10;void HLD(int u, int hd) {&#10;    if (!u) return;&#10;    head[u] = hd;&#10;&#10;    pos[u] = cnt++;&#10;    HLD(heavy[u], hd);&#10;    for (int &amp;v: adj[u])&#10;        if (v != par[u] &amp;&amp; v != heavy[u])&#10;            HLD(v, v);&#10;}&#10;&#10;int query(int l, int r) {&#10;    // query on segtree or somthing, [l, r] are included&#10;}&#10;&#10;int get_path(int u, int v) {&#10;    int a = head[u], b = head[v];&#10;&#10;    int res = 0;&#10;&#10;    while (a != b) {&#10;        if (depth[a] &lt; depth[b]) swap(a, b), swap(u, v);&#10;        res = res + query(pos[a], pos[u]);&#10;        u = par[a], a = head[u];&#10;    }&#10;&#10;    if (pos[u] &gt; pos[v]) swap(u, v);&#10;    res = res + query(pos[u], pos[v]);&#10;    return res;&#10;}&#10;&#10;int get_subtree(int u) {&#10;    return query(pos[u], pos[u] + sz[u] - 1);&#10;}&#10;&#10;void set_point(int u, int value) {&#10;    val[pos[u]] = value;&#10;    // update on segtree&#10;}&#10;&#10;// one indexed&#10;// call init(n), dfs(1, 0), HLD(1, 1); in main&#10;void init(int n) {&#10;    ++n, cnt = 0;&#10;    adj.assign(n, {});&#10;    par.assign(n, {});&#10;    depth.assign(n, {});&#10;    pos.assign(n, {});&#10;    sz.assign(n, {});&#10;    heavy.assign(n, {});&#10;    head.assign(n, {});&#10;    val.assign(n, {});&#10;}&#10;" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4ADC5866B7773240A704A64C089B9517/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4ADC5866B7773240A704A64C089B9517/Shortcut/@EntryValue" value="Tree" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4ADC5866B7773240A704A64C089B9517/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4ADC5866B7773240A704A64C089B9517/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4ADC5866B7773240A704A64C089B9517/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4ADC5866B7773240A704A64C089B9517/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4ADC5866B7773240A704A64C089B9517/Text/@EntryValue" value="adj.assign(n + 1, {});&#10;for(int i = 0; i &lt; n - 1; ++i) {&#10;    int u, v; cin &gt;&gt; u &gt;&gt; v;&#10;    adj[u].push_back(v);&#10;    adj[v].push_back(u);&#10;}" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=4ADC5866B7773240A704A64C089B9517/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=CDB3F61023C1C746A5A5E6C709C9CA5C/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=CDB3F61023C1C746A5A5E6C709C9CA5C/Text/@EntryValue" value="template&lt;class T&gt;&#10;struct SparseTable {&#10;    // change mxLog&#10;    static const int mxLog = 21;&#10;    vector&lt;array&lt;T, mxLog&gt;&gt; table;&#10;    vector&lt;int&gt; lg;&#10;    int n;&#10;&#10;    SparseTable() {};&#10;&#10;    SparseTable(int sz) {&#10;        n = sz;&#10;        table.resize(n + 1);&#10;        lg.resize(n + 1);&#10;        for (int i = 0; i &lt;= n; ++i) lg[i] = __lg(i);&#10;    }&#10;&#10;    void build(vector&lt;T&gt; &amp;v) {&#10;        for (int i = 0; i &lt; n; ++i) table[i][0] = v[i];&#10;        for (int j = 1; j &lt; mxLog; ++j)&#10;            for (int i = 0; i + (1 &lt;&lt; j) - 1 &lt; n; ++i)&#10;                table[i][j] = merge(table[i][j - 1], table[i + (1 &lt;&lt; (j - 1))][j - 1]);&#10;    }&#10;&#10;    T merge(T &amp;l, T &amp;r) {&#10;        return min(l, r);&#10;    }&#10;&#10;    T query(int l, int r) {&#10;        int j = lg[r - l + 1];&#10;        return merge(table[l][j], table[r - (1 &lt;&lt; j) + 1][j]);&#10;    }&#10;};&#10;&#10;struct LCA {&#10;    int n;&#10;    vector&lt;pair&lt;int, int&gt;&gt; tour;&#10;    vector&lt;int&gt; depth, in, par;&#10;    SparseTable&lt;pair&lt;int, int&gt;&gt; table;&#10;&#10;    LCA(int sz) {&#10;        n = sz;&#10;        in.resize(n);&#10;        depth.resize(n);&#10;        par.resize(n);&#10;        table = SparseTable&lt;pair&lt;int, int&gt;&gt;(2 * n);&#10;    }&#10;&#10;    void dfs(int u, int p, int d, auto &amp;adj) {&#10;        in[u] = (int) tour.size();&#10;        depth[u] = d;&#10;        par[u] = p;&#10;        tour.emplace_back(d, u);&#10;        for (int v: adj[u]) {&#10;            if (v == p) continue;&#10;            dfs(v, u, d + 1, adj);&#10;            tour.emplace_back(d, u);&#10;        }&#10;    }&#10;&#10;    void build(auto &amp;adj) {&#10;        dfs(0, 0, 0, adj);&#10;        table.build(tour);&#10;    }&#10;&#10;    int get(int u, int v) {&#10;        return table.query(min(in[u], in[v]), max(in[u], in[v])).second;&#10;    }&#10;&#10;    int dist(int u, int v) {&#10;        return depth[u] + depth[v] - 2 * depth[get(u, v)];&#10;    }&#10;};" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=CDB3F61023C1C746A5A5E6C709C9CA5C/Shortcut/@EntryValue" value="LCA" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=CDB3F61023C1C746A5A5E6C709C9CA5C/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=CDB3F61023C1C746A5A5E6C709C9CA5C/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=CDB3F61023C1C746A5A5E6C709C9CA5C/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=EA34F4026C00994CA2F031FB6B4EAF25/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=EA34F4026C00994CA2F031FB6B4EAF25/Shortcut/@EntryValue" value="Manacher" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=EA34F4026C00994CA2F031FB6B4EAF25/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=EA34F4026C00994CA2F031FB6B4EAF25/Text/@EntryValue" value="struct manacher {&#10;    string s;&#10;    vector&lt;int&gt; p;&#10;    manacher(string &amp;in) {&#10;        s = manacher_string(in);&#10;        int n = s.size();&#10;        p.assign(n, 0);&#10;        for (int i = 0, l = 0, r = -1, k; i &lt; n; ++i) {&#10;            if (i &gt; r)&#10;                k = 1;&#10;            else&#10;                k = min(p[l + (r - i)], r - i) + 1;&#10;            while (i - k &gt;= 0 &amp;&amp; i + k &lt; n &amp;&amp; s[i - k] == s[i + k])&#10;                ++k;&#10;&#10;            if (i - k == -1 || i + k == n || s[i - k] != s[i + k])&#10;                --k;&#10;            p[i] = k;&#10;            if (i + k &gt; r)&#10;                l = i - k, r = i + k;&#10;        }&#10;    }&#10;    &#10;    string manacher_string(string &amp;in) {&#10;        int n = in.size();&#10;        string t(2 * n + 1, '#');&#10;        for (int i = 1, j = 0; i &lt; 2 * n + 1; i += 2, ++j)&#10;            t[i] = in[j];&#10;        return t;&#10;    }&#10;    &#10;    bool is_palindrome(int l, int r) {&#10;        int L = 2 * l + 1;&#10;        int R = 2 * r + 1;&#10;        int mid = (L + R) / 2;&#10;        return p[mid] &gt;= mid - L;&#10;    }&#10;};" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=EA34F4026C00994CA2F031FB6B4EAF25/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=EA34F4026C00994CA2F031FB6B4EAF25/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=EA34F4026C00994CA2F031FB6B4EAF25/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=EA34F4026C00994CA2F031FB6B4EAF25/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=1ED63F3564186646B7CCBAB3C7FD29F4/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=1ED63F3564186646B7CCBAB3C7FD29F4/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=1ED63F3564186646B7CCBAB3C7FD29F4/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=1ED63F3564186646B7CCBAB3C7FD29F4/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=1ED63F3564186646B7CCBAB3C7FD29F4/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=1ED63F3564186646B7CCBAB3C7FD29F4/Text/@EntryValue" value="pair&lt;vector&lt;int&gt;, vector&lt;int&gt;&gt; build(vector&lt;int&gt; &amp;v) {&#10;    int n = v.size();&#10;    vector&lt;int&gt; suff(n + 2), s(n + 2);&#10;    for (int i = n - 1; i &gt;= 0; --i) {&#10;        suff[i] = suff[i + 1] + v[i];&#10;        s[i] = s[i + 1] + suff[i];&#10;    }&#10;    return {suff, s};&#10;}&#10;&#10;int get(int l, int r, vector&lt;int&gt; &amp;suff, vector&lt;int&gt; &amp;s) {&#10;    int res = s[l] - s[r + 1];&#10;    res -= (r - l + 1) * suff[r + 1];&#10;    return res;&#10;}" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=1ED63F3564186646B7CCBAB3C7FD29F4/Shortcut/@EntryValue" value="ProgressiveSum" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=1ED63F3564186646B7CCBAB3C7FD29F4/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=B408AEE0C683204BBD70B8F0C8FD5E39/Shortcut/@EntryValue" value="Power" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=B408AEE0C683204BBD70B8F0C8FD5E39/Text/@EntryValue" value="int power(int a, int b) {&#10;    int res = 1;&#10;    while(b) {&#10;        if(b&amp;1) res = 1ll * res * a % mod;&#10;        a = 1ll * a * a % mod, b &gt;&gt;= 1;&#10;    }&#10;    return res;&#10;}" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=B408AEE0C683204BBD70B8F0C8FD5E39/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=B408AEE0C683204BBD70B8F0C8FD5E39/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=B408AEE0C683204BBD70B8F0C8FD5E39/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=B408AEE0C683204BBD70B8F0C8FD5E39/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=8AF173703645DE4D895F6AA3F4264593/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=8AF173703645DE4D895F6AA3F4264593/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=8AF173703645DE4D895F6AA3F4264593/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=8AF173703645DE4D895F6AA3F4264593/Text/@EntryValue" value="mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());&#10;#define getrand(l, r) uniform_int_distribution&lt;long long&gt;(l, r)(rng)" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=8AF173703645DE4D895F6AA3F4264593/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=8AF173703645DE4D895F6AA3F4264593/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=8AF173703645DE4D895F6AA3F4264593/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=8AF173703645DE4D895F6AA3F4264593/Shortcut/@EntryValue" value="Random" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=E0BB53C1E54205459243C6067E362C50/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=E0BB53C1E54205459243C6067E362C50/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=E0BB53C1E54205459243C6067E362C50/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=E0BB53C1E54205459243C6067E362C50/Shortcut/@EntryValue" value="GPMap" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=E0BB53C1E54205459243C6067E362C50/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=E0BB53C1E54205459243C6067E362C50/Text/@EntryValue" value="#include &lt;ext/pb_ds/assoc_container.hpp&gt;&#10;using namespace __gnu_pbds;&#10;&#10;struct custom_hash {&#10;    static uint64_t splitmix64(uint64_t x) {&#10;        x += 0x9e3779b97f4a7c15;&#10;        x = (x ^ (x &gt;&gt; 30)) * 0xbf58476d1ce4e5b9;&#10;        x = (x ^ (x &gt;&gt; 27)) * 0x94d049bb133111eb;&#10;        return x ^ (x &gt;&gt; 31);&#10;    }&#10;    size_t operator()(uint64_t x) const {&#10;        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();&#10;        return splitmix64(x + FIXED_RANDOM);&#10;    }&#10;};&#10;&#10;using GPMap = gp_hash_table&lt;int, int, custom_hash&gt;;" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=E0BB53C1E54205459243C6067E362C50/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=E0BB53C1E54205459243C6067E362C50/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=88DF4B3B4087F444A8B144DCB210DD84/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=88DF4B3B4087F444A8B144DCB210DD84/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=88DF4B3B4087F444A8B144DCB210DD84/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=88DF4B3B4087F444A8B144DCB210DD84/Text/@EntryValue" value="vector&lt;int&gt; $v$(n);&#10;for(int &amp;i: $v$) cin &gt;&gt; i;" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=88DF4B3B4087F444A8B144DCB210DD84/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=88DF4B3B4087F444A8B144DCB210DD84/Field/=0/Order/@EntryValue" value="0" type="long" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=88DF4B3B4087F444A8B144DCB210DD84/Shortcut/@EntryValue" value="Vec" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=88DF4B3B4087F444A8B144DCB210DD84/Field/=1/Order/@EntryValue" value="0" type="long" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=88DF4B3B4087F444A8B144DCB210DD84/Field/=v/Order/@EntryValue" value="0" type="long" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=88DF4B3B4087F444A8B144DCB210DD84/Field/=v/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3AED7237B04DB7479F492ECD8A48F3FF/Shortcut/@EntryValue" value="NTT" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3AED7237B04DB7479F492ECD8A48F3FF/Text/@EntryValue" value="const int mod = 998244353;&#10;const int root = 31;&#10;const int root_1 = 128805723;&#10;const int root_pw = 1 &lt;&lt; 23;&#10;&#10;// make the size of (a) power of 2&#10;void fft(vector&lt;int&gt; &amp;a, bool invert) {&#10;    int n = a.size();&#10;&#10;    // reversal bit sort&#10;    for (int i = 1, j = 0; i &lt; n; i++) {&#10;        int bit = n &gt;&gt; 1;&#10;        for (; j &amp; bit; bit &gt;&gt;= 1)&#10;            j ^= bit;&#10;        j ^= bit;&#10;&#10;        if (i &lt; j)&#10;            swap(a[i], a[j]);&#10;    }&#10;&#10;    for (int len = 2; len &lt;= n; len &lt;&lt;= 1) {&#10;        int wlen = invert ? root_1 : root;&#10;        for (int i = len; i &lt; root_pw; i &lt;&lt;= 1)&#10;            wlen = 1ll * wlen * wlen % mod;&#10;&#10;        for (int i = 0; i &lt; n; i += len) {&#10;            int w = 1;&#10;            for (int j = 0; j &lt; len / 2; j++) {&#10;                int u = a[i + j], v = 1ll * a[i + j + len / 2] * w % mod;&#10;                a[i + j] = u + v;&#10;                if (a[i + j] &gt;= mod) a[i + j] -= mod;&#10;                a[i + j + len / 2] = u - v;&#10;                if (a[i + j + len / 2] &lt; 0) a[i + j + len / 2] += mod;&#10;                w = 1ll * w * wlen % mod;&#10;            }&#10;        }&#10;    }&#10;&#10;    if (invert) {&#10;        int n_1 = power(n, mod - 2);&#10;        for (int &amp;x: a)&#10;            x = 1ll * x * n_1 % mod;&#10;    }&#10;}&#10;&#10;&#10;vector&lt;int&gt; multiply(vector&lt;int&gt; const &amp;a, vector&lt;int&gt; const &amp;b) {&#10;    vector&lt;int&gt; fa = a, fb = b;&#10;    int n = 1;&#10;    while (n &lt; a.size() + b.size())&#10;        n &lt;&lt;= 1;&#10;    fa.resize(n);&#10;    fb.resize(n);&#10;&#10;    fft(fa, false);&#10;    fft(fb, false);&#10;    for (int i = 0; i &lt; n; i++)&#10;        fa[i] = 1ll * fa[i] * fb[i] % mod;&#10;    fft(fa, true);&#10;&#10;    fa.resize(a.size() + b.size());&#10;    return fa;&#10;}&#10;&#10;vector&lt;int&gt; power(vector&lt;int&gt; &amp;a, int b) {&#10;    vector&lt;int&gt; res{1};&#10;    while (b) {&#10;        if (b &amp; 1) res = multiply(res, a);&#10;        a = multiply(a, a), b &gt;&gt;= 1;&#10;    }&#10;    return res;&#10;}" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3AED7237B04DB7479F492ECD8A48F3FF/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3AED7237B04DB7479F492ECD8A48F3FF/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3AED7237B04DB7479F492ECD8A48F3FF/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=3AED7237B04DB7479F492ECD8A48F3FF/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=659F5897B72F3346BE01EB01ED966BC5/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=659F5897B72F3346BE01EB01ED966BC5/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=659F5897B72F3346BE01EB01ED966BC5/Text/@EntryValue" value="using cd = complex&lt;double&gt;;&#10;const double PI = acos(-1);&#10;&#10;int reverse(int x, int lg){&#10;    int res = 0;&#10;    for(int i = 0; i &lt; lg; ++i)&#10;        if(x &amp; (1 &lt;&lt; i)) res |= 1 &lt;&lt; (lg-1-i);&#10;    return res;&#10;}&#10; &#10;void fft(vector&lt;cd&gt; &amp; a, bool invert) {&#10;    int m = a.size(), lg = 0;&#10;    while((1 &lt;&lt; lg) &lt; m) ++lg;&#10; &#10;    for(int i = 0; i &lt; m; ++i)&#10;        if(i &lt; reverse(i, lg))&#10;            swap(a[i], a[reverse(i, lg)]);&#10; &#10;    for(int len = 2; len &lt;= m; len &lt;&lt;= 1){&#10;        cd omg = exp(cd(0, 2.0 * PI / len * (invert ? -1 : 1)));&#10;        for(int i = 0; i &lt; m; i += len){&#10;            cd curOmg = cd(1, 0);&#10;            for(int j = 0; j &lt; len/2; ++j){&#10;                cd e = a[i + j], o = a[i + j + len/2] * curOmg;&#10;                a[i + j] = e + o;&#10;                a[i + j + len/2] = e - o;&#10;                curOmg *= omg;&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;vector&lt;int&gt; multiply(vector&lt;int&gt; &amp; a, vector&lt;int&gt; &amp; b) {&#10;    vector&lt;cd&gt; fa(a.begin(), a.end()), fb(b.begin(), b.end());&#10;    int n = 1;&#10;    while (n &lt; a.size() + b.size())&#10;        n &lt;&lt;= 1;&#10;    fa.resize(n), fb.resize(n);&#10;    &#10;    fft(fa, false);&#10;    fft(fb, false);&#10;    for (int i = 0; i &lt; n; i++)&#10;        fa[i] *= fb[i];&#10;    fft(fa, true);&#10;&#10;    vector&lt;int&gt; result(n);&#10;    for (int i = 0; i &lt; n; i++)&#10;        result[i] = round(fa[i].real());&#10;    return result;&#10;}&#10;&#10;vector&lt;int&gt; power(vector&lt;int&gt; &amp;a, int b) {&#10;    vector&lt;int&gt; res = {1};&#10;    while (b) {&#10;        if (b &amp; 1) res = multiply(res, a);&#10;        a = multiply(a, a), b &gt;&gt;= 1;&#10;    }&#10;    return res;&#10;}" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=659F5897B72F3346BE01EB01ED966BC5/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=659F5897B72F3346BE01EB01ED966BC5/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=659F5897B72F3346BE01EB01ED966BC5/Shortcut/@EntryValue" value="FFT" type="string" />
  </component>
  <component name="CMakeWorkspace" PROJECT_DIR="$PROJECT_DIR$" />
</project>