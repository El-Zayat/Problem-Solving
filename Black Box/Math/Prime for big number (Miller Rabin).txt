/////////////////////////////////////////Miller Rabin Pirmality Testing////////////////////////////////////////
ll mulmod(ll a, ll b, ll p) {
    ll res = 0;
    ll y = a % p;
    while (b) {
        if (b & 1) res = (res + y) % p;
        b /= 2;
        y = (y * 2) % p;
    }
    return res % p;
}

ll modularExponentiation(ll a, ll b, ll p) {
    ll res = 1;
    while (b > 0) {
        if (b & 1) res = mulmod(res, a, p);
        a = mulmod(a, a, p);
        b /= 2;
    }
    return res % p;
}

bool checkComposite(ll n, ll a, ll d, ll s) {
    ll x = modularExponentiation(a, d, n);
    if (x == 1 || x == n - 1) return 0;
    for (ll r = 1; r < s; ++r) {
        x = mulmod(x, x, n);
        if (x == n - 1) return 0;
    }
    return 1;
}

bool milerRabin(ll n, int k) {
    if (n < 4) return n == 2 || n == 3;
    ll s = 0, d = n - 1;
    while (!(d & 1)) {
        d >>= 1;
        ++s;
    }
    for (int i = 0; i < k; ++i) {
        ll a = 2 + rand() % (n - 3);
        if (checkComposite(n, a, d, s)) return 0;
    }
    return 1;
}