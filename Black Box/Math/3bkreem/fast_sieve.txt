struct sieve {
    vector<bool> is_prime;
    vector<int> primes, divisors;
 
    sieve(int n) {
        divisors = vector<int>(n + 1);
        is_prime = vector<bool>(n + 1, true);
	is_prime[1] = 0;
 
        for (int i = 2; i <= n; i++) {
            if (is_prime[i]) {
                divisors[i] = i;
                primes.push_back(i);
            }
 
            for (auto p : primes) {
                if (1LL * i * p > n) {
                    break;
                }
 
                is_prime[i * p] = false;
                divisors[i * p] = p;
 
                if (i % p == 0) {
                    break;
                }
            }
        }
    }
 
    vector<int> prime_factorization(int x) {
        vector<int> P;
        while (x > 1) {
            if (P.empty() or divisors[x] != P.back()) {
                P.push_back(divisors[x]);
            }
            x /= divisors[x];
        }
        return P;
    }
};