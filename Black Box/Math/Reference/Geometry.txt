ld convertToRadian(ld degree){
    return degree * M_PI/180.0;
}

ld convertToDegree(ld Radian){
    return Radian * 180.0/ M_PI;
}

ld dist(ld x1, ld y1, ld x2, ld y2){
    return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
}

//Small leters sides, capital for angles
ld getside_a_bAB(ld b, ld A, ld B){
    return sin(A) * b / sin(B);
}

ld getside_a_bcA(ld b, ld c, ld A){
    return sqrt(b*b+c*c-2*b*c*cos(A));
}

ld getangle_A_abB(ld a, ld b, ld B){
    return asin(a * sin(B)/b);
}

ld getangle_A_abc(ld a, ld b, ld c){
    return acos((b * b + c * c - a * a)/(2 * b * c));
}

pair<ld,ld> mirror(ld x, ld y, ld x1, ld y1, ld x2, ld y2){
    ld A = y2 - y1;
    ld B = -(x2 - x1);
    ld C = -A * x1 - B * y1;
    ld M = M = sqrt(A * A + B * B);
 
    A/=M; B/= M; C /= M;
    ld D =  A * x + B * y + C;
    return {x - 2 * A * D, y - 2 * B * D};
}
 
pair<ld,ld> intersectBetweenTwoLines(ld x1, ld y1, ld x2, ld y2, ld x3, ld y3, ld x4, ld y4){
    if(x2 == x1){
        if(x3 == x4){
            //no intersect
        }
        else{
            ld m2 = (y4 - y3)/(x4 - x3);
            return {x1, m2 * x1 - x3 * m2 + y3};
        }
    }
    else if(x3 == x4){
        ld m1 = (y2 - y1)/(x2 - x1);
        return {x3 ,m1 * x3 - x1 * m1 + y1};
    }
    ld m1 = (y2 - y1)/(x2 - x1), m2 = (y4 - y3)/(x4 - x3);
    ld x = x1 * m1 - x3 * m2 - y1 + y3;
    x /= (m1 - m2);
    return {x ,m1 * x - x1 * m1 + y1};
}



pair<ld,ld> mirrorusinggemometry(ld x, ld y, ld x1, ld y1, ld x2, ld y2){
    ld A = y2 - y1;
    ld B = -(x2 - x1);
    ld C = -A * x1 - B * y1;

    ld D = abs(A*x + B*y + C)/ sqrt(A*A+B*B);

    if(fabs(y2 - y1) > 1e-9){
        ld MirroredX = ((B * B * x / A) - C - B * y - D * sqrt(A*A+B*B))/(A+B*B/A);
        if(fabs(MirroredX - x) < 1e-9){
            MirroredX = ((B * B * x / A) - C - B * y + D * sqrt(A*A+B*B))/(A+B*B/A);
        }
        ld MirroredY= (A*y-B*x+B*MirroredX)/A;
        return {MirroredX, MirroredY};
    }
    else{
        return {x, 2 * y1 - y};
    }
}


//rotate (x,y) about (px,py) by thetarotate CounterClockwise
pair<ld, ld> rotate(ld x, ld y, ld px, ld py,ld thetarotate){
    ld theta1 = atan2((y - py),(x - px));
    ld thetanew = theta1 + thetarotate;

    ld distance = dist(px,py,x,y);
    x = px + distance * cos(thetanew);
    y = py + distance * sin(thetanew);
    return {x,y};
}