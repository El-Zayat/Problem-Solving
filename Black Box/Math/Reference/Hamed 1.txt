bool is_prime(ll num) {
    if (num == 2) return true;
    if (num < 2 || !(num % 2)) return false;

    for (ll i = 3; i * i <= num; i += 2) {
        if (!(num % i)) return false;
    }

    return true;
}

////////////////////////////////////////
///// range of primes

vb prime_range_sieve(ll num) {

    vb primes(num + 1, true);
    primes[0] = primes[1] = false;

    for (ll i = 2; i * i <= num; i++) {
        for (ll j = i * 2; primes[i] && j <= num; j += i) {
            primes[j] = false;
        }
    }

    return primes;
}

ll count_primes(ll num) {

    vb primes(num + 1);
    primes = prime_range_sieve(num);

    ll counter = 0;
    for (bool i : primes) counter += i;

    return counter;
}

vl get_primes(ll num) {

    vb primes_check(num + 1);
    primes_check = prime_range_sieve(num);

    vl primes;
    for (ll i = 2; i < sz(primes_check); i++) {
        if (primes_check[i]) primes.push_back(i);
    }

    return primes;
}



////// divisors


vl get_divisors(ll num) {

    vl divisors;

    ll i;
    for (i = 1; i * i < num; i++) {
        if (!(num % i)) {
            divisors.push_back(i);
            divisors.push_back(num / i);
        }
    }
    if((i * i) == num) divisors.push_back(i);

    return divisors;
}

ll count_divisors(ll num) {

    ll i, counter = 0;
    for (i = 1; i * i < num; i++) {
        if (!(num % i)) counter += 2;
    }
    if ((i * i) == num) counter++;

    return counter;
}



///// factorization

vl prime_factorization(ll num) {

    vl factors;

    if (num < 2) return factors;

    while (!(num % 2)) {
        factors.push_back(2);
        num /= 2;
    }

    for (ll i = 3; i * i <= num; i += 2) {
        while (!(num % i)) {
            factors.push_back(i);
            num /= i;
        }
    }

    if (num > 1) factors.push_back(num);

    return factors;
}
////////////////////////////////////////
long long LCM(long long a,long long b)
{
    if(a > b)
    {
        long long old_a = a;
        for (;a%b;a+=old_a);
        return a;
    }
    else
    {
        long long old_b = b;
        for (;b%a;b+=old_b);
        return b;
    }
}

/////////////////////////////////////////////////////
int GCD(int a, int b) {

    if (b)
        return GCD(b, a % b);
    else
        return a;
}
////////////////////////////////////////////////////
void bubbleSort(int arr[], int n)
{
    int i, j;
    for (i = 0; i < n - 1; i++)
  
        // Last i elements are already 
        // in place
        for (j = 0; j < n - i - 1; j++)
            if (arr[j] > arr[j + 1])
                swap(arr[j], arr[j + 1]);
}
/////////////////////////////////////////
bool is_Pal(string s){
    for(int i = 0, j = sz(s) - 1; i < sz(s)/2; i++, j--){
        if(s[i] != s[j]) return false;
    }
    return true;
}
/////////////////////////////////////////////
string binary(int n){
    string s;
    while(n){
        s.push_back(char((n%2) - '0'));
        n /= 2;
    }
    reverse(all(s));
    return s;
}


//////////////////////////////////////////////////
const int N = 1e6, mod = 1e9 + 7;

ll factorial[N];

void generate_fact() {
    factorial[0] = 1;
    for (int i = 1; i < N; ++i)
        factorial[i] = i * factorial[i - 1] % mod;
} 

ll power(ll a, ll b) {
    if (b <= 0) return 1;
    ll ret = power(a * a % mod, b / 2);
    if (b % 2) ret = ret * a % mod;
    return ret;
}

ll inverse(ll b) { return power(b, mod - 2); }
 
ll C(int n, int k) {
    return factorial[n] * inverse(factorial[n - k]) % mod * inverse(factorial[k]) % mod;
}

ll P(int n, int k) {
    return factorial[n] * inverse(factorial[n - k]) % mod;
}
ans = ans * inverse(n) % mod 
///////////////////////////////////////////////
