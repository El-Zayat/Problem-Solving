bool isPrime(ll n) {
    if(n == 2) return true;
    if(n % 2 == 0 || n < 2) return false;
    bool res = true;
    for(ll i = 3; i * i <= n; i += 2) if(!(n % i)) res = false;
    return res;
}

//////////////////////////////////////////////////////////////////////////////////////
vector<bool> prime;
vector<int> primes;

vector<int> Sieve(int n) {
    prime.assign(n + 1, true);
    prime[0] = prime[1] = false;

    for(int i = 2; i * i <= n; ++i) {
        if(!prime[i]) continue;
        for(int j = 2; j * i <= n; ++j) prime[i * j] = false;
    }

    // If needed
    for(int i = 2; i <= n; ++i) if(prime[i]) primes.push_back(i);
    return primes;
}

//////////////////////////////////////////////////////////////////////////////////////
ll countDivisors(ll x) {
    int res = 1;
    for(int p : primes) {
        if(p * p > x) break;
        if(x % p) continue;
        int cnt = 0;
        while(x % p == 0) {
            x /= p;
            ++cnt;
        }
        res *= cnt + 1;
    }

    if(x > 1) res *= 2;

    return res % mod;
}
///////////////////////////////////////////////////////////////////////////////////////
PRIME TEST (Copy the whole thing .. mul and power handles overflow)

typedef unsigned long long ull;
ull modmul(ull a, ull b, ull M) {
    ll ret = a * b - M * ull(1.L / M * a * b);
    return ret + M * (ret < 0) - M * (ret >= (ll)M);
}
ull modpow(ull b, ull e, ull mod) {
    ull ans = 1;
    for (; e; b = modmul(b, b, mod), e /= 2)
        if (e & 1) ans = modmul(ans, b, mod);
    return ans;
}

bool isPrime(ull n) {
    if (n < 2 || n % 6 % 4 != 1) return (n | 1) == 3;
    ull A[] = {2, 325, 9375, 28178, 450775, 9780504, 1795265022},
            s = __builtin_ctzll(n-1), d = n >> s;
    for (ull a : A) {
        ull p = modpow(a%n, d, n), i = s;
        while (p != 1 && p != n - 1 && a % n && i--)
            p = modmul(p, p, n);
        if (p != n-1 && i != s) return 0;
    }
    return 1;
}