struct Node {
    array<int, 26> freq;
    bool lazy;
    bool isLazy;
 
    Node() {
        freq.fill(0);
        lazy = 0;
        isLazy = 0;
    }
 
    Node(char x, int i) {
        freq.fill(0);
        freq[x-'a']++;
        lazy = 0;
        isLazy = 0;
    }
 
    void sort(int x, int lx, int rx, int st, array<int, 26> &all) {
        freq.fill(0);
 
        // you start adding when the prefix reaches st
        // stop adding when you complete adding the whole size of the segment
        int pref = 0, added = 0;
 
        if(x) {
            for(int i = 0; i < 26; ++i) {
                pref += all[i];
                int add = min(all[i], max(0, pref - st));
                add = min(add, (rx - lx) - added);
                freq[i] += add;
                added += add;
            }
        } else {
            for(int i = 25; i >= 0; --i) {
                pref += all[i];
                int add = min(all[i], max(0, pref - st));
                add = min(add, (rx - lx) - added);
                freq[i] += add;
                added += add;
            }
        }
 
        lazy = x;
        isLazy = 1;
    }
};
 
struct Sagara {
    int n;
    vector<Node> node;
 
    Sagara(int sz) {
        n = 1;
        while(n < sz) n *= 2;
        node.assign(n * 2, Node());
    }
 
    Node merge(Node &l, Node &r, int mid) {
        Node res = Node();
        for(int a = 0; a < 26; ++a)
            res.freq[a] = l.freq[a] + r.freq[a];
        return res;
    }
 
    void build(string &s, int x, int lx, int rx) {
        if(rx - lx == 1) {
            if(lx < s.size())
                node[x] = Node(s[lx], lx);
            return;
        }
 
        int m = lx + (rx - lx) / 2;
        int left = x * 2 + 1;
        int right = left + 1;
 
        build(s, left, lx, m);
        build(s, right, m, rx);
 
        node[x] = merge(node[left], node[right], m);
    }
 
    void build(string &s) {
        build(s, 0, 0, n);
    }
 
    void propagate(int x, int lx, int rx) {
        if(rx - lx == 1 || !node[x].isLazy) return;
 
        int m = (rx + lx) / 2;
        int left = 2 * x + 1;
        int right = left + 1;
 
        node[left].sort(node[x].lazy, lx, m, 0, node[x].freq);
        node[right].sort(node[x].lazy, m, rx, m - lx, node[x].freq);
 
        node[x].isLazy = 0;
        node[x].lazy = 0;
    }
 
    void update(int l, int r, ll val, array<int, 26> &all, int x, int lx, int rx) {
        propagate(x, lx, rx);
 
        if(lx >= r || rx <= l) return;
        if(lx >= l && rx <= r)
            return node[x].sort(val, lx, rx, lx - l, all);
 
 
        int m = (rx + lx) / 2;
        int left = 2 * x + 1;
        int right = left + 1;
 
        update(l, r, val, all, left, lx, m);
        update(l, r, val, all, right, m, rx);
 
        node[x] = merge(node[left], node[right], m);
    }
 
    void update(int l, int r, ll val) {
        array<int, 26> all = getFreq(l, r);
        update(l, r, val, all, 0, 0, n);
    }
 
    Node query(int l, int r, int x, int lx, int rx) {
        propagate(x, lx, rx);
 
        if(lx >= l && rx <= r) return node[x];
        if(lx >= r || rx <= l) return Node();
 
        int m = (rx + lx) / 2;
        int left = 2 * x + 1;
        int right = left + 1;
 
        Node leftPath = query(l, r, left, lx, m);
        Node rightPath = query(l, r, right, m, rx);
 
        return merge(leftPath, rightPath, m);
    }
 
    array<int, 26> getFreq(int l, int r) {
        return query(l, r, 0, 0, n).freq;
    }
 
    int getChar(int i) {
        array<int, 26> freq = getFreq(i, i+1);
        for(int j = 0; j < 26; ++j)
            if(freq[j])
                return j;
        return -1;
    }
};