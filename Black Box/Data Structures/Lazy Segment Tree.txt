struct Node {
    ll base = 0;
    ll val;
    ll lazy;
    bool isLazy;

    Node() {
        val = base;
        lazy = 0;
        isLazy = 0;
    }

    Node(int x) {
        val = x;
        lazy = 0;
        isLazy = 0;
    }

    void add(ll x, int lx, int rx) {
        val += x * (rx - lx);
        lazy += x;
        isLazy = 1;
    }
};

struct Sagara {
    int n;
    const int invalid = 0;
    vector<Node> node;

    Sagara(int sz) {
        n = 1;
        while(n < sz) n *= 2;
        node.assign(n * 2, Node());
    }

    Node merge(Node &l, Node &r) {
        Node res = Node();
        res.val = l.val + r.val;
        return res;
    }

    void build(vector<int> &v, int x, int lx, int rx) {
        if(rx - lx == 1) {
            if(lx < v.size())
                node[x] = Node(v[lx]);
            return;
        }

        int m = lx + (rx - lx) / 2;
        int left = x * 2 + 1;
        int right = left + 1;

        build(v, left, lx, m);
        build(v, right, m, rx);

        node[x] = merge(node[left], node[right]);
    }

    void build(vector<int> &v) {
        build(v, 0, 0, n);
    }

    void propagate(int x, int lx, int rx) {
        if(rx - lx == 1 || !node[x].isLazy) return;

        int m = (rx + lx) / 2;
        int left = 2 * x + 1;
        int right = left + 1;

        node[left].add(node[x].lazy, lx, m);
        node[right].add(node[x].lazy, m, rx);

        node[x].isLazy = 0;
        node[x].lazy = 0;
    }

    void update(int l, int r, ll val, int x, int lx, int rx) {
        propagate(x, lx, rx);

        if(lx >= r || rx <= l) return;
        if(lx >= l && rx <= r)
            return node[x].add(val, lx, rx);


        int m = (rx + lx) / 2;
        int left = 2 * x + 1;
        int right = left + 1;

        update(l, r, val, left, lx, m);
        update(l, r, val, right, m, rx);

        node[x] = merge(node[left], node[right]);
    }

    void update(int l, int r, ll val) {
        update(l, r, val, 0, 0, n);
    }

    Node query(int l, int r, int x, int lx, int rx) {
        propagate(x, lx, rx);

        if(lx >= l && rx <= r) return node[x];
        if(lx >= r || rx <= l) return Node(invalid);

        int m = (rx + lx) / 2;
        int left = 2 * x + 1;
        int right = left + 1;

        Node leftPath = query(l, r, left, lx, m);
        Node rightPath = query(l, r, right, m, rx);

        return merge(leftPath, rightPath);
    }

    Node query(int l, int r) {
        return query(l, r, 0, 0, n);
    }
};