struct Node {
    ll neutral = 0;
    ll val;

    Node() {
        val = neutral;
    }

    Node(ll x) {
        val = x;
    }
};

struct Sagara {
    int n;
    vector<Node> node;

    Sagara(int sz) {
        n = 1;
        while(n < sz) n *= 2;
        node.assign(n * 2, Node());
    }

    Node merge(Node &l, Node &r) {
        Node res = Node();
        res.val = max(l.val, r.val);
        return res;
    }

    void build(vector<int> &v, int x, int lx, int rx) {
        if(rx - lx == 1) {
            if(lx < v.size())
                node[x] = Node(v[lx]);
            return;
        }

        int m = lx + (rx - lx) / 2;
        int left = x * 2 + 1;
        int right = left + 1;

        build(v, left, lx, m);
        build(v, right, m, rx);

        node[x] = merge(node[left], node[right]);
    }

    void build(vector<int> &v) {
        build(v, 0, 0, n);
    }

    void set(int &ind, ll &val, int x, int lx, int rx) {
        if(rx - lx == 1) {
            if(ind == lx) node[x] = Node(val);
            return;
        }

        int m = lx + (rx - lx) / 2;
        int left = x * 2 + 1;
        int right = left + 1;

        if(ind < m) set(ind, val, left, lx, m);
        else set(ind, val, right, m, rx);

        node[x] = merge(node[left], node[right]);
    }

    void set(int ind, ll val) {
        set(ind, val, 0, 0, n);
    }

    Node query(int &l, int &r, int x, int lx, int rx) {
        if(lx >= r || rx <= l) return Node();
        if(rx <= r && lx >= l) return node[x];

        int m = lx + (rx - lx) / 2;
        int left = x * 2 + 1;
        int right = left + 1;

        Node leftPath = query(l, r, left, lx, m);
        Node rightPath = query(l, r, right, m, rx);

        return merge(leftPath, rightPath);
    }

    Node query(int l, int r) {
        return query(l, r, 0, 0, n);
    }
};