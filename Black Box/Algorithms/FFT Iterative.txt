using cd = complex<double>;
const double PI = acos(-1);

int reverse(int x, int lg){
    int res = 0;
    for(int i = 0; i < lg; ++i)
        if(x & (1 << i)) res |= 1 << (lg-1-i);
    return res;
}
 
void fft(vector<cd> & a, bool invert) {
    int m = a.size(), lg = 0;
    while((1 << lg) < m) ++lg;
 
    for(int i = 0; i < m; ++i)
        if(i < reverse(i, lg))
            swap(a[i], a[reverse(i, lg)]);
 
    for(int len = 2; len <= m; len <<= 1){
        cd omg = exp(cd(0, 2.0 * PI / len * (invert ? -1 : 1)));
        for(int i = 0; i < m; i += len){
            cd curOmg = cd(1, 0);
            for(int j = 0; j < len/2; ++j){
                cd e = a[i + j], o = a[i + j + len/2] * curOmg;
                a[i + j] = e + o;
                a[i + j + len/2] = e - o;
                curOmg *= omg;
            }
        }
    }
}

vector<int> multiply(vector<int> & a, vector<int> & b) {
    vector<cd> fa(a.begin(), a.end()), fb(b.begin(), b.end());
    int n = 1;
    while (n < a.size() + b.size())
        n <<= 1;
    fa.resize(n), fb.resize(n);
    
    fft(fa, false);
    fft(fb, false);
    for (int i = 0; i < n; i++)
        fa[i] *= fb[i];
    fft(fa, true);

    vector<int> result(n);
    for (int i = 0; i < n; i++)
        result[i] = round(fa[i].real());
    return result;
}

vector<int> power(vector<int> &a, int b) {
    vector<int> res = {1};
    while (b) {
        if (b & 1) res = multiply(res, a);
        a = multiply(a, a), b >>= 1;
    }
    return res;
}