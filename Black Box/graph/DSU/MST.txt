struct Edge {
    int u, v;
    ll c;
};

struct MST {
    int n;
    vector<int> parent, size;
    vector<Edge> edges;
    ll w;

    MST(int sz) {
        n = sz;
        parent.resize(n + 1);
        size.resize(n + 1);
        w = 0;
        init();
    }

    void init() {
        for(int u = 1; u <= n; ++u)
            makeSet(u);
    }

    void build(vector<Edge> edgs) {
        sort(edgs.begin(), edgs.end(), [&](Edge &l, Edge &r) {
            return l.c < r.c;
        });

        for(auto [u, v, c] : edgs) {
            if(merge(u, v)) {
                w += c;
                edges.emplace_back(u, v, c);
            }
        }
    }

    void makeSet(int u) {
        parent[u] = u;
        size[u] = 1;
    }

    int find(int u) {
        if(u == parent[u])
            return u;
        return parent[u] = find(parent[u]);
    }

    bool merge(int u, int v) {
        int uP = find(u);
        int vP = find(v);

        if(vP == uP) return false;

        if(size[vP] > size[uP]) swap(uP, vP);
        size[uP] += size[vP];
        parent[vP] = uP;
        return true;
    }
};