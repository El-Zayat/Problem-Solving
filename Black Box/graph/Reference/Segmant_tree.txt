vector<long long> tree;
------------------------------------------------------------------------------------------------------------------------
int build_seg_tree(int n, vector<long long> & nums)
{
    int tree_size = 1;
    while(tree_size < n) tree_size *= 2;

    tree.clear();
    tree.resize(tree_size * 2, 0);

    for (int i = 0; i < n; ++i)
    {
        tree[tree_size + i] = nums[i];
    }
    for(int i = tree_size - 1; i > 0; --i)
    {
        tree[i] = tree[i * 2] + tree[i * 2 + 1];  // min(tree[i * 2], tree[i * 2 + 1])
    }

    return tree_size;
}
------------------------------------------------------------------------------------------------------------------------
long long get_range_query(int node, int node_low, int node_high, int query_low, int query_high) // 0-indexed ranges
{
    if(node_low >= query_low && node_high <= query_high)
        return tree[node];

    if(node_low > query_high || node_high < query_low)
        return 0;

    return get_range_query(node * 2, node_low, (node_low + node_high) / 2, query_low, query_high)
         + get_range_query(node * 2 + 1, (node_low + node_high) / 2 + 1, node_high, query_low, query_high);    // min not +
}
------------------------------------------------------------------------------------------------------------------------
void update_value_query(int node, int tree_size, long long val) // 0-indexed ranges
{
    node += tree_size;
    tree[node] = val;

    while(node != 1)
    {
        node /= 2;
        tree[node] = tree[node * 2] + tree[node * 2 + 1];   // min(tree[[node * 2], tree[[node * 2 + 1])
    }
}
------------------------------------------------------------------------------------------------------------------------
===============================================Recursive update function================================================
------------------------------------------------------------------------------------------------------------------------
void update_value_query(int node, int node_low, int node_high, int query_low, int query_high, long long val) // 0-indexed ranges
{
    if(node_low >= query_low && node_high <= query_high)
    {
        tree[node] = val;
        return;
    }


    if(node_low > query_high || node_high < query_low)
        return;

    update_value_query(node * 2, node_low, (node_low + node_high) / 2, query_low, query_high, val);
    update_value_query(node * 2 + 1, (node_low + node_high) / 2 + 1, node_high, query_low, query_high, val);

    tree[node] = tree[node * 2] + tree[node * 2 + 1];  // min(tree[[node * 2], tree[[node * 2 + 1])
}
------------------------------------------------------------------------------------------------------------------------
============================================Recursive mix get&update function===========================================
------------------------------------------------------------------------------------------------------------------------
long long get_update_range_query(int node, int node_low, int node_high, int query_low, int query_high, long long val = -1) // 0-indexed ranges
{
    if(node_low >= query_low && node_high <= query_high)
    {
        if(val != -1)
            tree[node] = val;
        return tree[node];
    }


    if(node_low > query_high || node_high < query_low)
        return 0;

    long long range_sum =  get_update_range_query(node * 2, node_low, (node_low + node_high) / 2, query_low, query_high, val)
                         + get_update_range_query(node * 2 + 1, (node_low + node_high) / 2 + 1, node_high, query_low, query_high, val);   // min not +

    tree[node] = tree[node * 2] + tree[node * 2 + 1]; // // min(tree[[node * 2], tree[[node * 2 + 1])

    return range_sum;
}
------------------------------------------------------------------------------------------------------------------------
============================================Update range and get single point===========================================
------------------------------------------------------------------------------------------------------------------------
int build_seg_tree(int n, vector<long long> & nums)
{
    int tree_size = 1;
    while(tree_size < n) tree_size *= 2;

    tree.clear();
    tree.resize(tree_size * 2, 0);

    for (int i = 0; i < n; ++i)
    {
        tree[tree_size + i] = nums[i];
    }

    return tree_size;
}
------------------------------------------------------------------------------------------------------------------------
long long get_update_range_query(int node, int node_low, int node_high, int query_low, int query_high, long long val = -1)
{
    if(node_low >= query_low && node_high <= query_high)
    {
        if(val != -1)
            tree[node] += val;
        return tree[node];
    }


    if(node_low > query_high || node_high < query_low)
        return 0;

    long long range_sum =  get_update_range_query(node * 2, node_low, (node_low + node_high) / 2, query_low, query_high, val)
                         + get_update_range_query(node * 2 + 1, (node_low + node_high) / 2 + 1, node_high, query_low, query_high, val);

    return range_sum + tree[node];
}